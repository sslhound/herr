// Code generated by go generate; DO NOT EDIT.
// This file was generated by herr at 2020-01-14 22:20:35.4138345 -0500 EST m=+0.010996001
package errors

import (
    "fmt"
	"testing"
	"errors"
)


func TestDebugErrorOne (t *testing.T) {
    err1 := DebugErrorOneError{}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugErrorOne: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 1 {
		t.Errorf("Assertion failed on DebugErrorOne: %d != 1", err1.Code())
    }
    if err1.Description() != "The first debug error" {
		t.Errorf("Assertion failed on DebugErrorOne: %s != The first debug error", err1.Description())
    }

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := DebugErrorOneError{ Err: errThingNotFound }
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 1 {
		t.Errorf("Assertion failed on DebugErrorOne: %d != 1", err1.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugErrorOne: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugErrorOne: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugErrorOneError{}) {
		t.Errorf("Assertion failed on DebugErrorOne: DebugErrorOneError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugErrorOneError{}) {
		t.Errorf("Assertion failed on DebugErrorOne: DebugErrorOneError{} not identified correctly")
    }

}

func TestDebugErrorTwo (t *testing.T) {
    err1 := DebugErrorTwoError{}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugErrorTwo: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 2 {
		t.Errorf("Assertion failed on DebugErrorTwo: %d != 2", err1.Code())
    }
    if err1.Description() != "The second debug error" {
		t.Errorf("Assertion failed on DebugErrorTwo: %s != The second debug error", err1.Description())
    }

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := DebugErrorTwoError{ Err: errThingNotFound }
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 2 {
		t.Errorf("Assertion failed on DebugErrorTwo: %d != 2", err1.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugErrorTwo: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugErrorTwo: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugErrorTwoError{}) {
		t.Errorf("Assertion failed on DebugErrorTwo: DebugErrorTwoError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugErrorTwoError{}) {
		t.Errorf("Assertion failed on DebugErrorTwo: DebugErrorTwoError{} not identified correctly")
    }

}

func TestDebugErrorThree (t *testing.T) {
    err1 := DebugErrorThreeError{}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugErrorThree: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 6 {
		t.Errorf("Assertion failed on DebugErrorThree: %d != 6", err1.Code())
    }
    if err1.Description() != "The third debug error" {
		t.Errorf("Assertion failed on DebugErrorThree: %s != The third debug error", err1.Description())
    }

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := DebugErrorThreeError{ Err: errThingNotFound }
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 6 {
		t.Errorf("Assertion failed on DebugErrorThree: %d != 6", err1.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugErrorThree: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugErrorThree: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugErrorThreeError{}) {
		t.Errorf("Assertion failed on DebugErrorThree: DebugErrorThreeError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugErrorThreeError{}) {
		t.Errorf("Assertion failed on DebugErrorThree: DebugErrorThreeError{} not identified correctly")
    }

    if !errors.Is(err2, DebugErrorTwoError{}) {
		t.Errorf("Assertion failed on DebugErrorThree: DebugErrorTwoError{} not identified correctly")
    }

}

func TestInvalidAndroidVersion (t *testing.T) {
    err1 := InvalidAndroidVersionError{}
    if err1.Prefix() != "MOBAND" {
		t.Errorf("Assertion failed on InvalidAndroidVersion: %s != MOBAND", err1.Prefix())
    }
    if err1.Code() != 4 {
		t.Errorf("Assertion failed on InvalidAndroidVersion: %d != 4", err1.Code())
    }
    if err1.Description() != "The Android version is invalid." {
		t.Errorf("Assertion failed on InvalidAndroidVersion: %s != The Android version is invalid.", err1.Description())
    }

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := InvalidAndroidVersionError{ Err: errThingNotFound }
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 4 {
		t.Errorf("Assertion failed on InvalidAndroidVersion: %d != 4", err1.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on InvalidAndroidVersion: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on InvalidAndroidVersion: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, InvalidAndroidVersionError{}) {
		t.Errorf("Assertion failed on InvalidAndroidVersion: InvalidAndroidVersionError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, InvalidAndroidVersionError{}) {
		t.Errorf("Assertion failed on InvalidAndroidVersion: InvalidAndroidVersionError{} not identified correctly")
    }

}

func TestInvalidAndroidDevice (t *testing.T) {
    err1 := InvalidAndroidDeviceError{}
    if err1.Prefix() != "MOBAND" {
		t.Errorf("Assertion failed on InvalidAndroidDevice: %s != MOBAND", err1.Prefix())
    }
    if err1.Code() != 5 {
		t.Errorf("Assertion failed on InvalidAndroidDevice: %d != 5", err1.Code())
    }
    if err1.Description() != "The Android device is invalid." {
		t.Errorf("Assertion failed on InvalidAndroidDevice: %s != The Android device is invalid.", err1.Description())
    }

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := InvalidAndroidDeviceError{ Err: errThingNotFound }
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 5 {
		t.Errorf("Assertion failed on InvalidAndroidDevice: %d != 5", err1.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on InvalidAndroidDevice: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on InvalidAndroidDevice: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, InvalidAndroidDeviceError{}) {
		t.Errorf("Assertion failed on InvalidAndroidDevice: InvalidAndroidDeviceError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, InvalidAndroidDeviceError{}) {
		t.Errorf("Assertion failed on InvalidAndroidDevice: InvalidAndroidDeviceError{} not identified correctly")
    }

}

func TestInvalidIOSDevice (t *testing.T) {
    err1 := InvalidIOSDeviceError{}
    if err1.Prefix() != "MOBIOS" {
		t.Errorf("Assertion failed on InvalidIOSDevice: %s != MOBIOS", err1.Prefix())
    }
    if err1.Code() != 3 {
		t.Errorf("Assertion failed on InvalidIOSDevice: %d != 3", err1.Code())
    }
    if err1.Description() != "The iOS device is invalid." {
		t.Errorf("Assertion failed on InvalidIOSDevice: %s != The iOS device is invalid.", err1.Description())
    }

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := InvalidIOSDeviceError{ Err: errThingNotFound }
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 3 {
		t.Errorf("Assertion failed on InvalidIOSDevice: %d != 3", err1.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on InvalidIOSDevice: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on InvalidIOSDevice: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, InvalidIOSDeviceError{}) {
		t.Errorf("Assertion failed on InvalidIOSDevice: InvalidIOSDeviceError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, InvalidIOSDeviceError{}) {
		t.Errorf("Assertion failed on InvalidIOSDevice: InvalidIOSDeviceError{} not identified correctly")
    }

}


