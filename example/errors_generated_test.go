// Code generated by go generate; DO NOT EDIT.
// This file was generated by herr at 2020-01-19 14:32:19.3671688 -0500 EST m=+0.012971201
package errors

import (
    "fmt"
	"testing"
	"errors"
)


func TestDebugErrorOne (t *testing.T) {
    err1 := NewDebugErrorOneError(nil)
	{
	err1, ok := err1.(DebugErrorOneError)
    if !ok {
		t.Errorf("Assertion failed on DebugErrorOne: %T is not DebugErrorOneError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugErrorOne: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 1 {
		t.Errorf("Assertion failed on DebugErrorOne: %d != 1", err1.Code())
    }
    if err1.Description() != "The first debug error" {
		t.Errorf("Assertion failed on DebugErrorOne: %s != The first debug error", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugErrorOneError(errThingNotFound)
	{
    err2, ok := err2.(DebugErrorOneError)
    if !ok {
		t.Errorf("Assertion failed on DebugErrorOne: %T is not DebugErrorOneError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 1 {
		t.Errorf("Assertion failed on DebugErrorOne: %d != 1", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugErrorOne: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugErrorOne: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugErrorOneError{}) {
		t.Errorf("Assertion failed on DebugErrorOne: DebugErrorOneError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugErrorOneError{}) {
		t.Errorf("Assertion failed on DebugErrorOne: DebugErrorOneError{} not identified correctly")
    }

	}
}

func TestDebugErrorTwo (t *testing.T) {
    err1 := NewDebugErrorTwoError(nil)
	{
	err1, ok := err1.(DebugErrorTwoError)
    if !ok {
		t.Errorf("Assertion failed on DebugErrorTwo: %T is not DebugErrorTwoError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugErrorTwo: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 2 {
		t.Errorf("Assertion failed on DebugErrorTwo: %d != 2", err1.Code())
    }
    if err1.Description() != "The second debug error" {
		t.Errorf("Assertion failed on DebugErrorTwo: %s != The second debug error", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugErrorTwoError(errThingNotFound)
	{
    err2, ok := err2.(DebugErrorTwoError)
    if !ok {
		t.Errorf("Assertion failed on DebugErrorTwo: %T is not DebugErrorTwoError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 2 {
		t.Errorf("Assertion failed on DebugErrorTwo: %d != 2", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugErrorTwo: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugErrorTwo: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugErrorTwoError{}) {
		t.Errorf("Assertion failed on DebugErrorTwo: DebugErrorTwoError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugErrorTwoError{}) {
		t.Errorf("Assertion failed on DebugErrorTwo: DebugErrorTwoError{} not identified correctly")
    }

	}
}

func TestDebugErrorThree (t *testing.T) {
    err1 := NewDebugErrorThreeError(nil)
	{
	err1, ok := err1.(DebugErrorThreeError)
    if !ok {
		t.Errorf("Assertion failed on DebugErrorThree: %T is not DebugErrorThreeError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugErrorThree: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 6 {
		t.Errorf("Assertion failed on DebugErrorThree: %d != 6", err1.Code())
    }
    if err1.Description() != "The third debug error" {
		t.Errorf("Assertion failed on DebugErrorThree: %s != The third debug error", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugErrorThreeError(errThingNotFound)
	{
    err2, ok := err2.(DebugErrorThreeError)
    if !ok {
		t.Errorf("Assertion failed on DebugErrorThree: %T is not DebugErrorThreeError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 6 {
		t.Errorf("Assertion failed on DebugErrorThree: %d != 6", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugErrorThree: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugErrorThree: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugErrorThreeError{}) {
		t.Errorf("Assertion failed on DebugErrorThree: DebugErrorThreeError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugErrorThreeError{}) {
		t.Errorf("Assertion failed on DebugErrorThree: DebugErrorThreeError{} not identified correctly")
    }
if !errors.Is(err2, DebugErrorTwoError{}) {
		t.Errorf("Assertion failed on DebugErrorThree: DebugErrorTwoError{} not identified correctly")
    }

	}
}

func TestInvalidAndroidVersion (t *testing.T) {
    err1 := NewInvalidAndroidVersionError(nil)
	{
	err1, ok := err1.(InvalidAndroidVersionError)
    if !ok {
		t.Errorf("Assertion failed on InvalidAndroidVersion: %T is not InvalidAndroidVersionError", err1)
	}
    if err1.Prefix() != "MOBAND" {
		t.Errorf("Assertion failed on InvalidAndroidVersion: %s != MOBAND", err1.Prefix())
    }
    if err1.Code() != 4 {
		t.Errorf("Assertion failed on InvalidAndroidVersion: %d != 4", err1.Code())
    }
    if err1.Description() != "The Android version is invalid." {
		t.Errorf("Assertion failed on InvalidAndroidVersion: %s != The Android version is invalid.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewInvalidAndroidVersionError(errThingNotFound)
	{
    err2, ok := err2.(InvalidAndroidVersionError)
    if !ok {
		t.Errorf("Assertion failed on InvalidAndroidVersion: %T is not InvalidAndroidVersionError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 4 {
		t.Errorf("Assertion failed on InvalidAndroidVersion: %d != 4", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on InvalidAndroidVersion: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on InvalidAndroidVersion: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, InvalidAndroidVersionError{}) {
		t.Errorf("Assertion failed on InvalidAndroidVersion: InvalidAndroidVersionError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, InvalidAndroidVersionError{}) {
		t.Errorf("Assertion failed on InvalidAndroidVersion: InvalidAndroidVersionError{} not identified correctly")
    }

	}
}

func TestInvalidAndroidDevice (t *testing.T) {
    err1 := NewInvalidAndroidDeviceError(nil)
	{
	err1, ok := err1.(InvalidAndroidDeviceError)
    if !ok {
		t.Errorf("Assertion failed on InvalidAndroidDevice: %T is not InvalidAndroidDeviceError", err1)
	}
    if err1.Prefix() != "MOBAND" {
		t.Errorf("Assertion failed on InvalidAndroidDevice: %s != MOBAND", err1.Prefix())
    }
    if err1.Code() != 5 {
		t.Errorf("Assertion failed on InvalidAndroidDevice: %d != 5", err1.Code())
    }
    if err1.Description() != "The Android device is invalid." {
		t.Errorf("Assertion failed on InvalidAndroidDevice: %s != The Android device is invalid.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewInvalidAndroidDeviceError(errThingNotFound)
	{
    err2, ok := err2.(InvalidAndroidDeviceError)
    if !ok {
		t.Errorf("Assertion failed on InvalidAndroidDevice: %T is not InvalidAndroidDeviceError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 5 {
		t.Errorf("Assertion failed on InvalidAndroidDevice: %d != 5", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on InvalidAndroidDevice: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on InvalidAndroidDevice: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, InvalidAndroidDeviceError{}) {
		t.Errorf("Assertion failed on InvalidAndroidDevice: InvalidAndroidDeviceError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, InvalidAndroidDeviceError{}) {
		t.Errorf("Assertion failed on InvalidAndroidDevice: InvalidAndroidDeviceError{} not identified correctly")
    }

	}
}

func TestInvalidIOSDevice (t *testing.T) {
    err1 := NewInvalidIOSDeviceError(nil)
	{
	err1, ok := err1.(InvalidIOSDeviceError)
    if !ok {
		t.Errorf("Assertion failed on InvalidIOSDevice: %T is not InvalidIOSDeviceError", err1)
	}
    if err1.Prefix() != "MOBIOS" {
		t.Errorf("Assertion failed on InvalidIOSDevice: %s != MOBIOS", err1.Prefix())
    }
    if err1.Code() != 3 {
		t.Errorf("Assertion failed on InvalidIOSDevice: %d != 3", err1.Code())
    }
    if err1.Description() != "The iOS device is invalid." {
		t.Errorf("Assertion failed on InvalidIOSDevice: %s != The iOS device is invalid.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewInvalidIOSDeviceError(errThingNotFound)
	{
    err2, ok := err2.(InvalidIOSDeviceError)
    if !ok {
		t.Errorf("Assertion failed on InvalidIOSDevice: %T is not InvalidIOSDeviceError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 3 {
		t.Errorf("Assertion failed on InvalidIOSDevice: %d != 3", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on InvalidIOSDevice: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on InvalidIOSDevice: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, InvalidIOSDeviceError{}) {
		t.Errorf("Assertion failed on InvalidIOSDevice: InvalidIOSDeviceError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, InvalidIOSDeviceError{}) {
		t.Errorf("Assertion failed on InvalidIOSDevice: InvalidIOSDeviceError{} not identified correctly")
    }

	}
}


