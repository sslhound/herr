// Code generated by go generate; DO NOT EDIT.
// This file was generated by herr at 2020-01-22 16:40:31.3230249 -0500 EST m=+0.017997801
package errors

import (
    "fmt"
	"testing"
	"errors"
)


func TestDebugErrorOne (t *testing.T) {
    err1 := NewDebugErrorOneError(nil)
	{
	err1, ok := err1.(DebugErrorOneError)
    if !ok {
		t.Errorf("Assertion failed on DebugErrorOne: %T is not DebugErrorOneError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugErrorOne: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 1 {
		t.Errorf("Assertion failed on DebugErrorOne: %d != 1", err1.Code())
    }
    if err1.Description() != "The first debug error" {
		t.Errorf("Assertion failed on DebugErrorOne: %s != The first debug error", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugErrorOneError(errThingNotFound)
	{
    err2, ok := err2.(DebugErrorOneError)
    if !ok {
		t.Errorf("Assertion failed on DebugErrorOne: %T is not DebugErrorOneError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 1 {
		t.Errorf("Assertion failed on DebugErrorOne: %d != 1", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugErrorOne: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugErrorOne: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugErrorOneError{}) {
		t.Errorf("Assertion failed on DebugErrorOne: DebugErrorOneError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugErrorOneError{}) {
		t.Errorf("Assertion failed on DebugErrorOne: DebugErrorOneError{} not identified correctly")
    }

	}
}

func TestDebugErrorTwo (t *testing.T) {
    err1 := NewDebugErrorTwoError(nil)
	{
	err1, ok := err1.(DebugErrorTwoError)
    if !ok {
		t.Errorf("Assertion failed on DebugErrorTwo: %T is not DebugErrorTwoError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugErrorTwo: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 2 {
		t.Errorf("Assertion failed on DebugErrorTwo: %d != 2", err1.Code())
    }
    if err1.Description() != "The second debug error" {
		t.Errorf("Assertion failed on DebugErrorTwo: %s != The second debug error", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugErrorTwoError(errThingNotFound)
	{
    err2, ok := err2.(DebugErrorTwoError)
    if !ok {
		t.Errorf("Assertion failed on DebugErrorTwo: %T is not DebugErrorTwoError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 2 {
		t.Errorf("Assertion failed on DebugErrorTwo: %d != 2", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugErrorTwo: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugErrorTwo: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugErrorTwoError{}) {
		t.Errorf("Assertion failed on DebugErrorTwo: DebugErrorTwoError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugErrorTwoError{}) {
		t.Errorf("Assertion failed on DebugErrorTwo: DebugErrorTwoError{} not identified correctly")
    }

	}
}

func TestDebugErrorThree (t *testing.T) {
    err1 := NewDebugErrorThreeError(nil)
	{
	err1, ok := err1.(DebugErrorThreeError)
    if !ok {
		t.Errorf("Assertion failed on DebugErrorThree: %T is not DebugErrorThreeError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugErrorThree: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 6 {
		t.Errorf("Assertion failed on DebugErrorThree: %d != 6", err1.Code())
    }
    if err1.Description() != "The third debug error" {
		t.Errorf("Assertion failed on DebugErrorThree: %s != The third debug error", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugErrorThreeError(errThingNotFound)
	{
    err2, ok := err2.(DebugErrorThreeError)
    if !ok {
		t.Errorf("Assertion failed on DebugErrorThree: %T is not DebugErrorThreeError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 6 {
		t.Errorf("Assertion failed on DebugErrorThree: %d != 6", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugErrorThree: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugErrorThree: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugErrorThreeError{}) {
		t.Errorf("Assertion failed on DebugErrorThree: DebugErrorThreeError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugErrorThreeError{}) {
		t.Errorf("Assertion failed on DebugErrorThree: DebugErrorThreeError{} not identified correctly")
    }
if !errors.Is(err2, DebugErrorTwoError{}) {
		t.Errorf("Assertion failed on DebugErrorThree: DebugErrorTwoError{} not identified correctly")
    }

	}
}

func TestDebugSeven (t *testing.T) {
    err1 := NewDebugSevenError(nil)
	{
	err1, ok := err1.(DebugSevenError)
    if !ok {
		t.Errorf("Assertion failed on DebugSeven: %T is not DebugSevenError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugSeven: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 7 {
		t.Errorf("Assertion failed on DebugSeven: %d != 7", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugSeven: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugSevenError(errThingNotFound)
	{
    err2, ok := err2.(DebugSevenError)
    if !ok {
		t.Errorf("Assertion failed on DebugSeven: %T is not DebugSevenError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 7 {
		t.Errorf("Assertion failed on DebugSeven: %d != 7", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugSeven: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugSeven: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugSevenError{}) {
		t.Errorf("Assertion failed on DebugSeven: DebugSevenError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugSevenError{}) {
		t.Errorf("Assertion failed on DebugSeven: DebugSevenError{} not identified correctly")
    }

	}
}

func TestDebugEight (t *testing.T) {
    err1 := NewDebugEightError(nil)
	{
	err1, ok := err1.(DebugEightError)
    if !ok {
		t.Errorf("Assertion failed on DebugEight: %T is not DebugEightError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugEight: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 8 {
		t.Errorf("Assertion failed on DebugEight: %d != 8", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugEight: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugEightError(errThingNotFound)
	{
    err2, ok := err2.(DebugEightError)
    if !ok {
		t.Errorf("Assertion failed on DebugEight: %T is not DebugEightError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 8 {
		t.Errorf("Assertion failed on DebugEight: %d != 8", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugEight: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugEight: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugEightError{}) {
		t.Errorf("Assertion failed on DebugEight: DebugEightError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugEightError{}) {
		t.Errorf("Assertion failed on DebugEight: DebugEightError{} not identified correctly")
    }

	}
}

func TestDebugNine (t *testing.T) {
    err1 := NewDebugNineError(nil)
	{
	err1, ok := err1.(DebugNineError)
    if !ok {
		t.Errorf("Assertion failed on DebugNine: %T is not DebugNineError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugNine: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 9 {
		t.Errorf("Assertion failed on DebugNine: %d != 9", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugNine: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugNineError(errThingNotFound)
	{
    err2, ok := err2.(DebugNineError)
    if !ok {
		t.Errorf("Assertion failed on DebugNine: %T is not DebugNineError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 9 {
		t.Errorf("Assertion failed on DebugNine: %d != 9", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugNine: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugNine: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugNineError{}) {
		t.Errorf("Assertion failed on DebugNine: DebugNineError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugNineError{}) {
		t.Errorf("Assertion failed on DebugNine: DebugNineError{} not identified correctly")
    }

	}
}

func TestDebugTen (t *testing.T) {
    err1 := NewDebugTenError(nil)
	{
	err1, ok := err1.(DebugTenError)
    if !ok {
		t.Errorf("Assertion failed on DebugTen: %T is not DebugTenError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugTen: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 10 {
		t.Errorf("Assertion failed on DebugTen: %d != 10", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugTen: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugTenError(errThingNotFound)
	{
    err2, ok := err2.(DebugTenError)
    if !ok {
		t.Errorf("Assertion failed on DebugTen: %T is not DebugTenError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 10 {
		t.Errorf("Assertion failed on DebugTen: %d != 10", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugTen: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugTen: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugTenError{}) {
		t.Errorf("Assertion failed on DebugTen: DebugTenError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugTenError{}) {
		t.Errorf("Assertion failed on DebugTen: DebugTenError{} not identified correctly")
    }

	}
}

func TestDebugEleven (t *testing.T) {
    err1 := NewDebugElevenError(nil)
	{
	err1, ok := err1.(DebugElevenError)
    if !ok {
		t.Errorf("Assertion failed on DebugEleven: %T is not DebugElevenError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugEleven: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 11 {
		t.Errorf("Assertion failed on DebugEleven: %d != 11", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugEleven: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugElevenError(errThingNotFound)
	{
    err2, ok := err2.(DebugElevenError)
    if !ok {
		t.Errorf("Assertion failed on DebugEleven: %T is not DebugElevenError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 11 {
		t.Errorf("Assertion failed on DebugEleven: %d != 11", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugEleven: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugEleven: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugElevenError{}) {
		t.Errorf("Assertion failed on DebugEleven: DebugElevenError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugElevenError{}) {
		t.Errorf("Assertion failed on DebugEleven: DebugElevenError{} not identified correctly")
    }

	}
}

func TestDebugTwelve (t *testing.T) {
    err1 := NewDebugTwelveError(nil)
	{
	err1, ok := err1.(DebugTwelveError)
    if !ok {
		t.Errorf("Assertion failed on DebugTwelve: %T is not DebugTwelveError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugTwelve: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 12 {
		t.Errorf("Assertion failed on DebugTwelve: %d != 12", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugTwelve: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugTwelveError(errThingNotFound)
	{
    err2, ok := err2.(DebugTwelveError)
    if !ok {
		t.Errorf("Assertion failed on DebugTwelve: %T is not DebugTwelveError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 12 {
		t.Errorf("Assertion failed on DebugTwelve: %d != 12", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugTwelve: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugTwelve: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugTwelveError{}) {
		t.Errorf("Assertion failed on DebugTwelve: DebugTwelveError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugTwelveError{}) {
		t.Errorf("Assertion failed on DebugTwelve: DebugTwelveError{} not identified correctly")
    }

	}
}

func TestDebugThirteen (t *testing.T) {
    err1 := NewDebugThirteenError(nil)
	{
	err1, ok := err1.(DebugThirteenError)
    if !ok {
		t.Errorf("Assertion failed on DebugThirteen: %T is not DebugThirteenError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugThirteen: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 13 {
		t.Errorf("Assertion failed on DebugThirteen: %d != 13", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugThirteen: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugThirteenError(errThingNotFound)
	{
    err2, ok := err2.(DebugThirteenError)
    if !ok {
		t.Errorf("Assertion failed on DebugThirteen: %T is not DebugThirteenError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 13 {
		t.Errorf("Assertion failed on DebugThirteen: %d != 13", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugThirteen: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugThirteen: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugThirteenError{}) {
		t.Errorf("Assertion failed on DebugThirteen: DebugThirteenError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugThirteenError{}) {
		t.Errorf("Assertion failed on DebugThirteen: DebugThirteenError{} not identified correctly")
    }

	}
}

func TestDebugFourteen (t *testing.T) {
    err1 := NewDebugFourteenError(nil)
	{
	err1, ok := err1.(DebugFourteenError)
    if !ok {
		t.Errorf("Assertion failed on DebugFourteen: %T is not DebugFourteenError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugFourteen: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 14 {
		t.Errorf("Assertion failed on DebugFourteen: %d != 14", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugFourteen: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugFourteenError(errThingNotFound)
	{
    err2, ok := err2.(DebugFourteenError)
    if !ok {
		t.Errorf("Assertion failed on DebugFourteen: %T is not DebugFourteenError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 14 {
		t.Errorf("Assertion failed on DebugFourteen: %d != 14", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugFourteen: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugFourteen: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugFourteenError{}) {
		t.Errorf("Assertion failed on DebugFourteen: DebugFourteenError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugFourteenError{}) {
		t.Errorf("Assertion failed on DebugFourteen: DebugFourteenError{} not identified correctly")
    }

	}
}

func TestDebugFifteen (t *testing.T) {
    err1 := NewDebugFifteenError(nil)
	{
	err1, ok := err1.(DebugFifteenError)
    if !ok {
		t.Errorf("Assertion failed on DebugFifteen: %T is not DebugFifteenError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugFifteen: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 15 {
		t.Errorf("Assertion failed on DebugFifteen: %d != 15", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugFifteen: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugFifteenError(errThingNotFound)
	{
    err2, ok := err2.(DebugFifteenError)
    if !ok {
		t.Errorf("Assertion failed on DebugFifteen: %T is not DebugFifteenError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 15 {
		t.Errorf("Assertion failed on DebugFifteen: %d != 15", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugFifteen: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugFifteen: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugFifteenError{}) {
		t.Errorf("Assertion failed on DebugFifteen: DebugFifteenError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugFifteenError{}) {
		t.Errorf("Assertion failed on DebugFifteen: DebugFifteenError{} not identified correctly")
    }

	}
}

func TestDebugSixteen (t *testing.T) {
    err1 := NewDebugSixteenError(nil)
	{
	err1, ok := err1.(DebugSixteenError)
    if !ok {
		t.Errorf("Assertion failed on DebugSixteen: %T is not DebugSixteenError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugSixteen: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 16 {
		t.Errorf("Assertion failed on DebugSixteen: %d != 16", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugSixteen: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugSixteenError(errThingNotFound)
	{
    err2, ok := err2.(DebugSixteenError)
    if !ok {
		t.Errorf("Assertion failed on DebugSixteen: %T is not DebugSixteenError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 16 {
		t.Errorf("Assertion failed on DebugSixteen: %d != 16", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugSixteen: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugSixteen: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugSixteenError{}) {
		t.Errorf("Assertion failed on DebugSixteen: DebugSixteenError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugSixteenError{}) {
		t.Errorf("Assertion failed on DebugSixteen: DebugSixteenError{} not identified correctly")
    }

	}
}

func TestDebugSeventeen (t *testing.T) {
    err1 := NewDebugSeventeenError(nil)
	{
	err1, ok := err1.(DebugSeventeenError)
    if !ok {
		t.Errorf("Assertion failed on DebugSeventeen: %T is not DebugSeventeenError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugSeventeen: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 17 {
		t.Errorf("Assertion failed on DebugSeventeen: %d != 17", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugSeventeen: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugSeventeenError(errThingNotFound)
	{
    err2, ok := err2.(DebugSeventeenError)
    if !ok {
		t.Errorf("Assertion failed on DebugSeventeen: %T is not DebugSeventeenError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 17 {
		t.Errorf("Assertion failed on DebugSeventeen: %d != 17", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugSeventeen: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugSeventeen: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugSeventeenError{}) {
		t.Errorf("Assertion failed on DebugSeventeen: DebugSeventeenError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugSeventeenError{}) {
		t.Errorf("Assertion failed on DebugSeventeen: DebugSeventeenError{} not identified correctly")
    }

	}
}

func TestDebugEighteen (t *testing.T) {
    err1 := NewDebugEighteenError(nil)
	{
	err1, ok := err1.(DebugEighteenError)
    if !ok {
		t.Errorf("Assertion failed on DebugEighteen: %T is not DebugEighteenError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugEighteen: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 18 {
		t.Errorf("Assertion failed on DebugEighteen: %d != 18", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugEighteen: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugEighteenError(errThingNotFound)
	{
    err2, ok := err2.(DebugEighteenError)
    if !ok {
		t.Errorf("Assertion failed on DebugEighteen: %T is not DebugEighteenError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 18 {
		t.Errorf("Assertion failed on DebugEighteen: %d != 18", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugEighteen: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugEighteen: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugEighteenError{}) {
		t.Errorf("Assertion failed on DebugEighteen: DebugEighteenError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugEighteenError{}) {
		t.Errorf("Assertion failed on DebugEighteen: DebugEighteenError{} not identified correctly")
    }

	}
}

func TestDebugNineteen (t *testing.T) {
    err1 := NewDebugNineteenError(nil)
	{
	err1, ok := err1.(DebugNineteenError)
    if !ok {
		t.Errorf("Assertion failed on DebugNineteen: %T is not DebugNineteenError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugNineteen: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 19 {
		t.Errorf("Assertion failed on DebugNineteen: %d != 19", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugNineteen: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugNineteenError(errThingNotFound)
	{
    err2, ok := err2.(DebugNineteenError)
    if !ok {
		t.Errorf("Assertion failed on DebugNineteen: %T is not DebugNineteenError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 19 {
		t.Errorf("Assertion failed on DebugNineteen: %d != 19", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugNineteen: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugNineteen: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugNineteenError{}) {
		t.Errorf("Assertion failed on DebugNineteen: DebugNineteenError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugNineteenError{}) {
		t.Errorf("Assertion failed on DebugNineteen: DebugNineteenError{} not identified correctly")
    }

	}
}

func TestDebugTwenty (t *testing.T) {
    err1 := NewDebugTwentyError(nil)
	{
	err1, ok := err1.(DebugTwentyError)
    if !ok {
		t.Errorf("Assertion failed on DebugTwenty: %T is not DebugTwentyError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugTwenty: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 20 {
		t.Errorf("Assertion failed on DebugTwenty: %d != 20", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugTwenty: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugTwentyError(errThingNotFound)
	{
    err2, ok := err2.(DebugTwentyError)
    if !ok {
		t.Errorf("Assertion failed on DebugTwenty: %T is not DebugTwentyError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 20 {
		t.Errorf("Assertion failed on DebugTwenty: %d != 20", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugTwenty: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugTwenty: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugTwentyError{}) {
		t.Errorf("Assertion failed on DebugTwenty: DebugTwentyError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugTwentyError{}) {
		t.Errorf("Assertion failed on DebugTwenty: DebugTwentyError{} not identified correctly")
    }

	}
}

func TestDebugTwentyOne (t *testing.T) {
    err1 := NewDebugTwentyOneError(nil)
	{
	err1, ok := err1.(DebugTwentyOneError)
    if !ok {
		t.Errorf("Assertion failed on DebugTwentyOne: %T is not DebugTwentyOneError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugTwentyOne: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 21 {
		t.Errorf("Assertion failed on DebugTwentyOne: %d != 21", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugTwentyOne: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugTwentyOneError(errThingNotFound)
	{
    err2, ok := err2.(DebugTwentyOneError)
    if !ok {
		t.Errorf("Assertion failed on DebugTwentyOne: %T is not DebugTwentyOneError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 21 {
		t.Errorf("Assertion failed on DebugTwentyOne: %d != 21", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugTwentyOne: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugTwentyOne: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugTwentyOneError{}) {
		t.Errorf("Assertion failed on DebugTwentyOne: DebugTwentyOneError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugTwentyOneError{}) {
		t.Errorf("Assertion failed on DebugTwentyOne: DebugTwentyOneError{} not identified correctly")
    }

	}
}

func TestDebugTwentyTwo (t *testing.T) {
    err1 := NewDebugTwentyTwoError(nil)
	{
	err1, ok := err1.(DebugTwentyTwoError)
    if !ok {
		t.Errorf("Assertion failed on DebugTwentyTwo: %T is not DebugTwentyTwoError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugTwentyTwo: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 22 {
		t.Errorf("Assertion failed on DebugTwentyTwo: %d != 22", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugTwentyTwo: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugTwentyTwoError(errThingNotFound)
	{
    err2, ok := err2.(DebugTwentyTwoError)
    if !ok {
		t.Errorf("Assertion failed on DebugTwentyTwo: %T is not DebugTwentyTwoError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 22 {
		t.Errorf("Assertion failed on DebugTwentyTwo: %d != 22", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugTwentyTwo: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugTwentyTwo: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugTwentyTwoError{}) {
		t.Errorf("Assertion failed on DebugTwentyTwo: DebugTwentyTwoError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugTwentyTwoError{}) {
		t.Errorf("Assertion failed on DebugTwentyTwo: DebugTwentyTwoError{} not identified correctly")
    }

	}
}

func TestDebugTwentyThree (t *testing.T) {
    err1 := NewDebugTwentyThreeError(nil)
	{
	err1, ok := err1.(DebugTwentyThreeError)
    if !ok {
		t.Errorf("Assertion failed on DebugTwentyThree: %T is not DebugTwentyThreeError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugTwentyThree: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 23 {
		t.Errorf("Assertion failed on DebugTwentyThree: %d != 23", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugTwentyThree: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugTwentyThreeError(errThingNotFound)
	{
    err2, ok := err2.(DebugTwentyThreeError)
    if !ok {
		t.Errorf("Assertion failed on DebugTwentyThree: %T is not DebugTwentyThreeError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 23 {
		t.Errorf("Assertion failed on DebugTwentyThree: %d != 23", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugTwentyThree: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugTwentyThree: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugTwentyThreeError{}) {
		t.Errorf("Assertion failed on DebugTwentyThree: DebugTwentyThreeError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugTwentyThreeError{}) {
		t.Errorf("Assertion failed on DebugTwentyThree: DebugTwentyThreeError{} not identified correctly")
    }

	}
}

func TestDebugTwentyFour (t *testing.T) {
    err1 := NewDebugTwentyFourError(nil)
	{
	err1, ok := err1.(DebugTwentyFourError)
    if !ok {
		t.Errorf("Assertion failed on DebugTwentyFour: %T is not DebugTwentyFourError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugTwentyFour: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 24 {
		t.Errorf("Assertion failed on DebugTwentyFour: %d != 24", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugTwentyFour: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugTwentyFourError(errThingNotFound)
	{
    err2, ok := err2.(DebugTwentyFourError)
    if !ok {
		t.Errorf("Assertion failed on DebugTwentyFour: %T is not DebugTwentyFourError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 24 {
		t.Errorf("Assertion failed on DebugTwentyFour: %d != 24", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugTwentyFour: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugTwentyFour: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugTwentyFourError{}) {
		t.Errorf("Assertion failed on DebugTwentyFour: DebugTwentyFourError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugTwentyFourError{}) {
		t.Errorf("Assertion failed on DebugTwentyFour: DebugTwentyFourError{} not identified correctly")
    }

	}
}

func TestDebugTwentyFive (t *testing.T) {
    err1 := NewDebugTwentyFiveError(nil)
	{
	err1, ok := err1.(DebugTwentyFiveError)
    if !ok {
		t.Errorf("Assertion failed on DebugTwentyFive: %T is not DebugTwentyFiveError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugTwentyFive: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 25 {
		t.Errorf("Assertion failed on DebugTwentyFive: %d != 25", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugTwentyFive: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugTwentyFiveError(errThingNotFound)
	{
    err2, ok := err2.(DebugTwentyFiveError)
    if !ok {
		t.Errorf("Assertion failed on DebugTwentyFive: %T is not DebugTwentyFiveError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 25 {
		t.Errorf("Assertion failed on DebugTwentyFive: %d != 25", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugTwentyFive: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugTwentyFive: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugTwentyFiveError{}) {
		t.Errorf("Assertion failed on DebugTwentyFive: DebugTwentyFiveError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugTwentyFiveError{}) {
		t.Errorf("Assertion failed on DebugTwentyFive: DebugTwentyFiveError{} not identified correctly")
    }

	}
}

func TestDebugTwentySix (t *testing.T) {
    err1 := NewDebugTwentySixError(nil)
	{
	err1, ok := err1.(DebugTwentySixError)
    if !ok {
		t.Errorf("Assertion failed on DebugTwentySix: %T is not DebugTwentySixError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugTwentySix: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 26 {
		t.Errorf("Assertion failed on DebugTwentySix: %d != 26", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugTwentySix: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugTwentySixError(errThingNotFound)
	{
    err2, ok := err2.(DebugTwentySixError)
    if !ok {
		t.Errorf("Assertion failed on DebugTwentySix: %T is not DebugTwentySixError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 26 {
		t.Errorf("Assertion failed on DebugTwentySix: %d != 26", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugTwentySix: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugTwentySix: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugTwentySixError{}) {
		t.Errorf("Assertion failed on DebugTwentySix: DebugTwentySixError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugTwentySixError{}) {
		t.Errorf("Assertion failed on DebugTwentySix: DebugTwentySixError{} not identified correctly")
    }

	}
}

func TestDebugTwentySeven (t *testing.T) {
    err1 := NewDebugTwentySevenError(nil)
	{
	err1, ok := err1.(DebugTwentySevenError)
    if !ok {
		t.Errorf("Assertion failed on DebugTwentySeven: %T is not DebugTwentySevenError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugTwentySeven: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 27 {
		t.Errorf("Assertion failed on DebugTwentySeven: %d != 27", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugTwentySeven: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugTwentySevenError(errThingNotFound)
	{
    err2, ok := err2.(DebugTwentySevenError)
    if !ok {
		t.Errorf("Assertion failed on DebugTwentySeven: %T is not DebugTwentySevenError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 27 {
		t.Errorf("Assertion failed on DebugTwentySeven: %d != 27", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugTwentySeven: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugTwentySeven: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugTwentySevenError{}) {
		t.Errorf("Assertion failed on DebugTwentySeven: DebugTwentySevenError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugTwentySevenError{}) {
		t.Errorf("Assertion failed on DebugTwentySeven: DebugTwentySevenError{} not identified correctly")
    }

	}
}

func TestDebugTwentyEight (t *testing.T) {
    err1 := NewDebugTwentyEightError(nil)
	{
	err1, ok := err1.(DebugTwentyEightError)
    if !ok {
		t.Errorf("Assertion failed on DebugTwentyEight: %T is not DebugTwentyEightError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugTwentyEight: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 28 {
		t.Errorf("Assertion failed on DebugTwentyEight: %d != 28", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugTwentyEight: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugTwentyEightError(errThingNotFound)
	{
    err2, ok := err2.(DebugTwentyEightError)
    if !ok {
		t.Errorf("Assertion failed on DebugTwentyEight: %T is not DebugTwentyEightError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 28 {
		t.Errorf("Assertion failed on DebugTwentyEight: %d != 28", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugTwentyEight: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugTwentyEight: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugTwentyEightError{}) {
		t.Errorf("Assertion failed on DebugTwentyEight: DebugTwentyEightError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugTwentyEightError{}) {
		t.Errorf("Assertion failed on DebugTwentyEight: DebugTwentyEightError{} not identified correctly")
    }

	}
}

func TestDebugTwentyNine (t *testing.T) {
    err1 := NewDebugTwentyNineError(nil)
	{
	err1, ok := err1.(DebugTwentyNineError)
    if !ok {
		t.Errorf("Assertion failed on DebugTwentyNine: %T is not DebugTwentyNineError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugTwentyNine: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 29 {
		t.Errorf("Assertion failed on DebugTwentyNine: %d != 29", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugTwentyNine: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugTwentyNineError(errThingNotFound)
	{
    err2, ok := err2.(DebugTwentyNineError)
    if !ok {
		t.Errorf("Assertion failed on DebugTwentyNine: %T is not DebugTwentyNineError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 29 {
		t.Errorf("Assertion failed on DebugTwentyNine: %d != 29", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugTwentyNine: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugTwentyNine: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugTwentyNineError{}) {
		t.Errorf("Assertion failed on DebugTwentyNine: DebugTwentyNineError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugTwentyNineError{}) {
		t.Errorf("Assertion failed on DebugTwentyNine: DebugTwentyNineError{} not identified correctly")
    }

	}
}

func TestDebugThirty (t *testing.T) {
    err1 := NewDebugThirtyError(nil)
	{
	err1, ok := err1.(DebugThirtyError)
    if !ok {
		t.Errorf("Assertion failed on DebugThirty: %T is not DebugThirtyError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugThirty: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 30 {
		t.Errorf("Assertion failed on DebugThirty: %d != 30", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugThirty: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugThirtyError(errThingNotFound)
	{
    err2, ok := err2.(DebugThirtyError)
    if !ok {
		t.Errorf("Assertion failed on DebugThirty: %T is not DebugThirtyError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 30 {
		t.Errorf("Assertion failed on DebugThirty: %d != 30", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugThirty: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugThirty: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugThirtyError{}) {
		t.Errorf("Assertion failed on DebugThirty: DebugThirtyError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugThirtyError{}) {
		t.Errorf("Assertion failed on DebugThirty: DebugThirtyError{} not identified correctly")
    }

	}
}

func TestDebugThirtyOne (t *testing.T) {
    err1 := NewDebugThirtyOneError(nil)
	{
	err1, ok := err1.(DebugThirtyOneError)
    if !ok {
		t.Errorf("Assertion failed on DebugThirtyOne: %T is not DebugThirtyOneError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugThirtyOne: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 31 {
		t.Errorf("Assertion failed on DebugThirtyOne: %d != 31", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugThirtyOne: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugThirtyOneError(errThingNotFound)
	{
    err2, ok := err2.(DebugThirtyOneError)
    if !ok {
		t.Errorf("Assertion failed on DebugThirtyOne: %T is not DebugThirtyOneError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 31 {
		t.Errorf("Assertion failed on DebugThirtyOne: %d != 31", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugThirtyOne: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugThirtyOne: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugThirtyOneError{}) {
		t.Errorf("Assertion failed on DebugThirtyOne: DebugThirtyOneError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugThirtyOneError{}) {
		t.Errorf("Assertion failed on DebugThirtyOne: DebugThirtyOneError{} not identified correctly")
    }

	}
}

func TestDebugThirtyTwo (t *testing.T) {
    err1 := NewDebugThirtyTwoError(nil)
	{
	err1, ok := err1.(DebugThirtyTwoError)
    if !ok {
		t.Errorf("Assertion failed on DebugThirtyTwo: %T is not DebugThirtyTwoError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugThirtyTwo: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 32 {
		t.Errorf("Assertion failed on DebugThirtyTwo: %d != 32", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugThirtyTwo: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugThirtyTwoError(errThingNotFound)
	{
    err2, ok := err2.(DebugThirtyTwoError)
    if !ok {
		t.Errorf("Assertion failed on DebugThirtyTwo: %T is not DebugThirtyTwoError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 32 {
		t.Errorf("Assertion failed on DebugThirtyTwo: %d != 32", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugThirtyTwo: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugThirtyTwo: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugThirtyTwoError{}) {
		t.Errorf("Assertion failed on DebugThirtyTwo: DebugThirtyTwoError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugThirtyTwoError{}) {
		t.Errorf("Assertion failed on DebugThirtyTwo: DebugThirtyTwoError{} not identified correctly")
    }

	}
}

func TestDebugThirtyThree (t *testing.T) {
    err1 := NewDebugThirtyThreeError(nil)
	{
	err1, ok := err1.(DebugThirtyThreeError)
    if !ok {
		t.Errorf("Assertion failed on DebugThirtyThree: %T is not DebugThirtyThreeError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugThirtyThree: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 33 {
		t.Errorf("Assertion failed on DebugThirtyThree: %d != 33", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugThirtyThree: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugThirtyThreeError(errThingNotFound)
	{
    err2, ok := err2.(DebugThirtyThreeError)
    if !ok {
		t.Errorf("Assertion failed on DebugThirtyThree: %T is not DebugThirtyThreeError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 33 {
		t.Errorf("Assertion failed on DebugThirtyThree: %d != 33", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugThirtyThree: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugThirtyThree: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugThirtyThreeError{}) {
		t.Errorf("Assertion failed on DebugThirtyThree: DebugThirtyThreeError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugThirtyThreeError{}) {
		t.Errorf("Assertion failed on DebugThirtyThree: DebugThirtyThreeError{} not identified correctly")
    }

	}
}

func TestDebugThirtyFour (t *testing.T) {
    err1 := NewDebugThirtyFourError(nil)
	{
	err1, ok := err1.(DebugThirtyFourError)
    if !ok {
		t.Errorf("Assertion failed on DebugThirtyFour: %T is not DebugThirtyFourError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugThirtyFour: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 34 {
		t.Errorf("Assertion failed on DebugThirtyFour: %d != 34", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugThirtyFour: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugThirtyFourError(errThingNotFound)
	{
    err2, ok := err2.(DebugThirtyFourError)
    if !ok {
		t.Errorf("Assertion failed on DebugThirtyFour: %T is not DebugThirtyFourError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 34 {
		t.Errorf("Assertion failed on DebugThirtyFour: %d != 34", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugThirtyFour: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugThirtyFour: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugThirtyFourError{}) {
		t.Errorf("Assertion failed on DebugThirtyFour: DebugThirtyFourError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugThirtyFourError{}) {
		t.Errorf("Assertion failed on DebugThirtyFour: DebugThirtyFourError{} not identified correctly")
    }

	}
}

func TestDebugThirtyFive (t *testing.T) {
    err1 := NewDebugThirtyFiveError(nil)
	{
	err1, ok := err1.(DebugThirtyFiveError)
    if !ok {
		t.Errorf("Assertion failed on DebugThirtyFive: %T is not DebugThirtyFiveError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugThirtyFive: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 35 {
		t.Errorf("Assertion failed on DebugThirtyFive: %d != 35", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugThirtyFive: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugThirtyFiveError(errThingNotFound)
	{
    err2, ok := err2.(DebugThirtyFiveError)
    if !ok {
		t.Errorf("Assertion failed on DebugThirtyFive: %T is not DebugThirtyFiveError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 35 {
		t.Errorf("Assertion failed on DebugThirtyFive: %d != 35", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugThirtyFive: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugThirtyFive: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugThirtyFiveError{}) {
		t.Errorf("Assertion failed on DebugThirtyFive: DebugThirtyFiveError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugThirtyFiveError{}) {
		t.Errorf("Assertion failed on DebugThirtyFive: DebugThirtyFiveError{} not identified correctly")
    }

	}
}

func TestDebugThirtySix (t *testing.T) {
    err1 := NewDebugThirtySixError(nil)
	{
	err1, ok := err1.(DebugThirtySixError)
    if !ok {
		t.Errorf("Assertion failed on DebugThirtySix: %T is not DebugThirtySixError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugThirtySix: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 36 {
		t.Errorf("Assertion failed on DebugThirtySix: %d != 36", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugThirtySix: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugThirtySixError(errThingNotFound)
	{
    err2, ok := err2.(DebugThirtySixError)
    if !ok {
		t.Errorf("Assertion failed on DebugThirtySix: %T is not DebugThirtySixError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 36 {
		t.Errorf("Assertion failed on DebugThirtySix: %d != 36", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugThirtySix: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugThirtySix: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugThirtySixError{}) {
		t.Errorf("Assertion failed on DebugThirtySix: DebugThirtySixError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugThirtySixError{}) {
		t.Errorf("Assertion failed on DebugThirtySix: DebugThirtySixError{} not identified correctly")
    }

	}
}

func TestDebugThirtySeven (t *testing.T) {
    err1 := NewDebugThirtySevenError(nil)
	{
	err1, ok := err1.(DebugThirtySevenError)
    if !ok {
		t.Errorf("Assertion failed on DebugThirtySeven: %T is not DebugThirtySevenError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugThirtySeven: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 37 {
		t.Errorf("Assertion failed on DebugThirtySeven: %d != 37", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugThirtySeven: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugThirtySevenError(errThingNotFound)
	{
    err2, ok := err2.(DebugThirtySevenError)
    if !ok {
		t.Errorf("Assertion failed on DebugThirtySeven: %T is not DebugThirtySevenError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 37 {
		t.Errorf("Assertion failed on DebugThirtySeven: %d != 37", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugThirtySeven: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugThirtySeven: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugThirtySevenError{}) {
		t.Errorf("Assertion failed on DebugThirtySeven: DebugThirtySevenError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugThirtySevenError{}) {
		t.Errorf("Assertion failed on DebugThirtySeven: DebugThirtySevenError{} not identified correctly")
    }

	}
}

func TestDebugThirtyEight (t *testing.T) {
    err1 := NewDebugThirtyEightError(nil)
	{
	err1, ok := err1.(DebugThirtyEightError)
    if !ok {
		t.Errorf("Assertion failed on DebugThirtyEight: %T is not DebugThirtyEightError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugThirtyEight: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 38 {
		t.Errorf("Assertion failed on DebugThirtyEight: %d != 38", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugThirtyEight: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugThirtyEightError(errThingNotFound)
	{
    err2, ok := err2.(DebugThirtyEightError)
    if !ok {
		t.Errorf("Assertion failed on DebugThirtyEight: %T is not DebugThirtyEightError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 38 {
		t.Errorf("Assertion failed on DebugThirtyEight: %d != 38", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugThirtyEight: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugThirtyEight: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugThirtyEightError{}) {
		t.Errorf("Assertion failed on DebugThirtyEight: DebugThirtyEightError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugThirtyEightError{}) {
		t.Errorf("Assertion failed on DebugThirtyEight: DebugThirtyEightError{} not identified correctly")
    }

	}
}

func TestDebugThirtyNine (t *testing.T) {
    err1 := NewDebugThirtyNineError(nil)
	{
	err1, ok := err1.(DebugThirtyNineError)
    if !ok {
		t.Errorf("Assertion failed on DebugThirtyNine: %T is not DebugThirtyNineError", err1)
	}
    if err1.Prefix() != "DBG" {
		t.Errorf("Assertion failed on DebugThirtyNine: %s != DBG", err1.Prefix())
    }
    if err1.Code() != 39 {
		t.Errorf("Assertion failed on DebugThirtyNine: %d != 39", err1.Code())
    }
    if err1.Description() != "An error." {
		t.Errorf("Assertion failed on DebugThirtyNine: %s != An error.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewDebugThirtyNineError(errThingNotFound)
	{
    err2, ok := err2.(DebugThirtyNineError)
    if !ok {
		t.Errorf("Assertion failed on DebugThirtyNine: %T is not DebugThirtyNineError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 39 {
		t.Errorf("Assertion failed on DebugThirtyNine: %d != 39", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on DebugThirtyNine: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on DebugThirtyNine: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, DebugThirtyNineError{}) {
		t.Errorf("Assertion failed on DebugThirtyNine: DebugThirtyNineError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, DebugThirtyNineError{}) {
		t.Errorf("Assertion failed on DebugThirtyNine: DebugThirtyNineError{} not identified correctly")
    }

	}
}

func TestInvalidAndroidVersion (t *testing.T) {
    err1 := NewInvalidAndroidVersionError(nil)
	{
	err1, ok := err1.(InvalidAndroidVersionError)
    if !ok {
		t.Errorf("Assertion failed on InvalidAndroidVersion: %T is not InvalidAndroidVersionError", err1)
	}
    if err1.Prefix() != "MOBAND" {
		t.Errorf("Assertion failed on InvalidAndroidVersion: %s != MOBAND", err1.Prefix())
    }
    if err1.Code() != 4 {
		t.Errorf("Assertion failed on InvalidAndroidVersion: %d != 4", err1.Code())
    }
    if err1.Description() != "The Android version is invalid." {
		t.Errorf("Assertion failed on InvalidAndroidVersion: %s != The Android version is invalid.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewInvalidAndroidVersionError(errThingNotFound)
	{
    err2, ok := err2.(InvalidAndroidVersionError)
    if !ok {
		t.Errorf("Assertion failed on InvalidAndroidVersion: %T is not InvalidAndroidVersionError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 4 {
		t.Errorf("Assertion failed on InvalidAndroidVersion: %d != 4", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on InvalidAndroidVersion: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on InvalidAndroidVersion: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, InvalidAndroidVersionError{}) {
		t.Errorf("Assertion failed on InvalidAndroidVersion: InvalidAndroidVersionError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, InvalidAndroidVersionError{}) {
		t.Errorf("Assertion failed on InvalidAndroidVersion: InvalidAndroidVersionError{} not identified correctly")
    }

	}
}

func TestInvalidAndroidDevice (t *testing.T) {
    err1 := NewInvalidAndroidDeviceError(nil)
	{
	err1, ok := err1.(InvalidAndroidDeviceError)
    if !ok {
		t.Errorf("Assertion failed on InvalidAndroidDevice: %T is not InvalidAndroidDeviceError", err1)
	}
    if err1.Prefix() != "MOBAND" {
		t.Errorf("Assertion failed on InvalidAndroidDevice: %s != MOBAND", err1.Prefix())
    }
    if err1.Code() != 5 {
		t.Errorf("Assertion failed on InvalidAndroidDevice: %d != 5", err1.Code())
    }
    if err1.Description() != "The Android device is invalid." {
		t.Errorf("Assertion failed on InvalidAndroidDevice: %s != The Android device is invalid.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewInvalidAndroidDeviceError(errThingNotFound)
	{
    err2, ok := err2.(InvalidAndroidDeviceError)
    if !ok {
		t.Errorf("Assertion failed on InvalidAndroidDevice: %T is not InvalidAndroidDeviceError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 5 {
		t.Errorf("Assertion failed on InvalidAndroidDevice: %d != 5", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on InvalidAndroidDevice: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on InvalidAndroidDevice: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, InvalidAndroidDeviceError{}) {
		t.Errorf("Assertion failed on InvalidAndroidDevice: InvalidAndroidDeviceError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, InvalidAndroidDeviceError{}) {
		t.Errorf("Assertion failed on InvalidAndroidDevice: InvalidAndroidDeviceError{} not identified correctly")
    }

	}
}

func TestInvalidIOSDevice (t *testing.T) {
    err1 := NewInvalidIOSDeviceError(nil)
	{
	err1, ok := err1.(InvalidIOSDeviceError)
    if !ok {
		t.Errorf("Assertion failed on InvalidIOSDevice: %T is not InvalidIOSDeviceError", err1)
	}
    if err1.Prefix() != "MOBIOS" {
		t.Errorf("Assertion failed on InvalidIOSDevice: %s != MOBIOS", err1.Prefix())
    }
    if err1.Code() != 3 {
		t.Errorf("Assertion failed on InvalidIOSDevice: %d != 3", err1.Code())
    }
    if err1.Description() != "The iOS device is invalid." {
		t.Errorf("Assertion failed on InvalidIOSDevice: %s != The iOS device is invalid.", err1.Description())
    }
	}

	errNotFound := fmt.Errorf("not found")
	errThingNotFound := fmt.Errorf("thing: %w", errNotFound)
	err2 := NewInvalidIOSDeviceError(errThingNotFound)
	{
    err2, ok := err2.(InvalidIOSDeviceError)
    if !ok {
		t.Errorf("Assertion failed on InvalidIOSDevice: %T is not InvalidIOSDeviceError", err2)
	}
	errNestErr2 := fmt.Errorf("oh snap: %w", err2)
    if err2.Code() != 3 {
		t.Errorf("Assertion failed on InvalidIOSDevice: %d != 3", err2.Code())
    }
    if !errors.Is(err2, errNotFound) {
		t.Errorf("Assertion failed on InvalidIOSDevice: errNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, errThingNotFound) {
		t.Errorf("Assertion failed on InvalidIOSDevice: errThingNotFound not unwrapped correctly")
    }
    if !errors.Is(err2, InvalidIOSDeviceError{}) {
		t.Errorf("Assertion failed on InvalidIOSDevice: InvalidIOSDeviceError{} not identified correctly")
    }
    if !errors.Is(errNestErr2, InvalidIOSDeviceError{}) {
		t.Errorf("Assertion failed on InvalidIOSDevice: InvalidIOSDeviceError{} not identified correctly")
    }

	}
}


