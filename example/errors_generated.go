// Code generated by go generate; DO NOT EDIT.
// This file was generated by herr at 2020-01-22 16:40:31.3150246 -0500 EST m=+0.009997501
package errors

import (
	"fmt"
	"io"
	"path"
	"runtime"
	"strconv"
	"strings"
    go_errors "errors"
)

type CodedError interface {
    Code() int
    Description() string
    Prefix() string
    error
}


type DebugErrorOneError struct {
    Err error
    Stack *stack
}

type DebugErrorTwoError struct {
    Err error
    Stack *stack
}

type DebugErrorThreeError struct {
    Err error
    Stack *stack
}

type DebugSevenError struct {
    Err error
    Stack *stack
}

type DebugEightError struct {
    Err error
    Stack *stack
}

type DebugNineError struct {
    Err error
    Stack *stack
}

type DebugTenError struct {
    Err error
    Stack *stack
}

type DebugElevenError struct {
    Err error
    Stack *stack
}

type DebugTwelveError struct {
    Err error
    Stack *stack
}

type DebugThirteenError struct {
    Err error
    Stack *stack
}

type DebugFourteenError struct {
    Err error
    Stack *stack
}

type DebugFifteenError struct {
    Err error
    Stack *stack
}

type DebugSixteenError struct {
    Err error
    Stack *stack
}

type DebugSeventeenError struct {
    Err error
    Stack *stack
}

type DebugEighteenError struct {
    Err error
    Stack *stack
}

type DebugNineteenError struct {
    Err error
    Stack *stack
}

type DebugTwentyError struct {
    Err error
    Stack *stack
}

type DebugTwentyOneError struct {
    Err error
    Stack *stack
}

type DebugTwentyTwoError struct {
    Err error
    Stack *stack
}

type DebugTwentyThreeError struct {
    Err error
    Stack *stack
}

type DebugTwentyFourError struct {
    Err error
    Stack *stack
}

type DebugTwentyFiveError struct {
    Err error
    Stack *stack
}

type DebugTwentySixError struct {
    Err error
    Stack *stack
}

type DebugTwentySevenError struct {
    Err error
    Stack *stack
}

type DebugTwentyEightError struct {
    Err error
    Stack *stack
}

type DebugTwentyNineError struct {
    Err error
    Stack *stack
}

type DebugThirtyError struct {
    Err error
    Stack *stack
}

type DebugThirtyOneError struct {
    Err error
    Stack *stack
}

type DebugThirtyTwoError struct {
    Err error
    Stack *stack
}

type DebugThirtyThreeError struct {
    Err error
    Stack *stack
}

type DebugThirtyFourError struct {
    Err error
    Stack *stack
}

type DebugThirtyFiveError struct {
    Err error
    Stack *stack
}

type DebugThirtySixError struct {
    Err error
    Stack *stack
}

type DebugThirtySevenError struct {
    Err error
    Stack *stack
}

type DebugThirtyEightError struct {
    Err error
    Stack *stack
}

type DebugThirtyNineError struct {
    Err error
    Stack *stack
}

type InvalidAndroidVersionError struct {
    Err error
    Stack *stack
}

type InvalidAndroidDeviceError struct {
    Err error
    Stack *stack
}

type InvalidIOSDeviceError struct {
    Err error
    Stack *stack
}

var _ CodedError = DebugErrorOneError{}
var _ CodedError = DebugErrorTwoError{}
var _ CodedError = DebugErrorThreeError{}
var _ CodedError = DebugSevenError{}
var _ CodedError = DebugEightError{}
var _ CodedError = DebugNineError{}
var _ CodedError = DebugTenError{}
var _ CodedError = DebugElevenError{}
var _ CodedError = DebugTwelveError{}
var _ CodedError = DebugThirteenError{}
var _ CodedError = DebugFourteenError{}
var _ CodedError = DebugFifteenError{}
var _ CodedError = DebugSixteenError{}
var _ CodedError = DebugSeventeenError{}
var _ CodedError = DebugEighteenError{}
var _ CodedError = DebugNineteenError{}
var _ CodedError = DebugTwentyError{}
var _ CodedError = DebugTwentyOneError{}
var _ CodedError = DebugTwentyTwoError{}
var _ CodedError = DebugTwentyThreeError{}
var _ CodedError = DebugTwentyFourError{}
var _ CodedError = DebugTwentyFiveError{}
var _ CodedError = DebugTwentySixError{}
var _ CodedError = DebugTwentySevenError{}
var _ CodedError = DebugTwentyEightError{}
var _ CodedError = DebugTwentyNineError{}
var _ CodedError = DebugThirtyError{}
var _ CodedError = DebugThirtyOneError{}
var _ CodedError = DebugThirtyTwoError{}
var _ CodedError = DebugThirtyThreeError{}
var _ CodedError = DebugThirtyFourError{}
var _ CodedError = DebugThirtyFiveError{}
var _ CodedError = DebugThirtySixError{}
var _ CodedError = DebugThirtySevenError{}
var _ CodedError = DebugThirtyEightError{}
var _ CodedError = DebugThirtyNineError{}
var _ CodedError = InvalidAndroidVersionError{}
var _ CodedError = InvalidAndroidDeviceError{}
var _ CodedError = InvalidIOSDeviceError{}

// ErrorFromCode returns the CodedError for a serialized coded error string. 
func ErrorFromCode(code string) (bool, error) {
    switch code {
    case "DBGAAAAAAAB":
        return true, DebugErrorOneError{}
    case "DBGAAAAAAAC":
        return true, DebugErrorTwoError{}
    case "DBGAAAAAAAG":
        return true, DebugErrorThreeError{}
    case "DBGAAAAAAAH":
        return true, DebugSevenError{}
    case "DBGAAAAAAAI":
        return true, DebugEightError{}
    case "DBGAAAAAAAJ":
        return true, DebugNineError{}
    case "DBGAAAAAAAK":
        return true, DebugTenError{}
    case "DBGAAAAAAAL":
        return true, DebugElevenError{}
    case "DBGAAAAAAAM":
        return true, DebugTwelveError{}
    case "DBGAAAAAAAN":
        return true, DebugThirteenError{}
    case "DBGAAAAAAAO":
        return true, DebugFourteenError{}
    case "DBGAAAAAAAP":
        return true, DebugFifteenError{}
    case "DBGAAAAAAAQ":
        return true, DebugSixteenError{}
    case "DBGAAAAAAAR":
        return true, DebugSeventeenError{}
    case "DBGAAAAAAAS":
        return true, DebugEighteenError{}
    case "DBGAAAAAAAT":
        return true, DebugNineteenError{}
    case "DBGAAAAAAAU":
        return true, DebugTwentyError{}
    case "DBGAAAAAAAV":
        return true, DebugTwentyOneError{}
    case "DBGAAAAAAAW":
        return true, DebugTwentyTwoError{}
    case "DBGAAAAAAAX":
        return true, DebugTwentyThreeError{}
    case "DBGAAAAAAAY":
        return true, DebugTwentyFourError{}
    case "DBGAAAAAAAZ":
        return true, DebugTwentyFiveError{}
    case "DBGAAAAAAA0":
        return true, DebugTwentySixError{}
    case "DBGAAAAAAA1":
        return true, DebugTwentySevenError{}
    case "DBGAAAAAAA2":
        return true, DebugTwentyEightError{}
    case "DBGAAAAAAA3":
        return true, DebugTwentyNineError{}
    case "DBGAAAAAAA4":
        return true, DebugThirtyError{}
    case "DBGAAAAAAA5":
        return true, DebugThirtyOneError{}
    case "DBGAAAAAAA6":
        return true, DebugThirtyTwoError{}
    case "DBGAAAAAAA7":
        return true, DebugThirtyThreeError{}
    case "DBGAAAAAAA8":
        return true, DebugThirtyFourError{}
    case "DBGAAAAAAA9":
        return true, DebugThirtyFiveError{}
    case "DBGAAAAAABA":
        return true, DebugThirtySixError{}
    case "DBGAAAAAABB":
        return true, DebugThirtySevenError{}
    case "DBGAAAAAABC":
        return true, DebugThirtyEightError{}
    case "DBGAAAAAABD":
        return true, DebugThirtyNineError{}
    case "MOBANDAAAAAAAE":
        return true, InvalidAndroidVersionError{}
    case "MOBANDAAAAAAAF":
        return true, InvalidAndroidDeviceError{}
    case "MOBIOSAAAAAAAD":
        return true, InvalidIOSDeviceError{}
    default:
        return false, fmt.Errorf("unknown error code: %s", code)
    }
}

func NewDebugErrorOneError(err error) error {

	return DebugErrorOneError{ Err: err, Stack: callers() }

}

func WrapDebugErrorOneError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugErrorOneError(err)
}

func NewDebugErrorTwoError(err error) error {

	return DebugErrorTwoError{ Err: err, Stack: callers() }

}

func WrapDebugErrorTwoError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugErrorTwoError(err)
}

func NewDebugErrorThreeError(err error) error {

	return DebugErrorThreeError{ Err: NewDebugErrorTwoError(err), Stack: callers() }

}

func WrapDebugErrorThreeError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugErrorThreeError(err)
}

func NewDebugSevenError(err error) error {

	return DebugSevenError{ Err: err, Stack: callers() }

}

func WrapDebugSevenError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugSevenError(err)
}

func NewDebugEightError(err error) error {

	return DebugEightError{ Err: err, Stack: callers() }

}

func WrapDebugEightError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugEightError(err)
}

func NewDebugNineError(err error) error {

	return DebugNineError{ Err: err, Stack: callers() }

}

func WrapDebugNineError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugNineError(err)
}

func NewDebugTenError(err error) error {

	return DebugTenError{ Err: err, Stack: callers() }

}

func WrapDebugTenError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugTenError(err)
}

func NewDebugElevenError(err error) error {

	return DebugElevenError{ Err: err, Stack: callers() }

}

func WrapDebugElevenError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugElevenError(err)
}

func NewDebugTwelveError(err error) error {

	return DebugTwelveError{ Err: err, Stack: callers() }

}

func WrapDebugTwelveError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugTwelveError(err)
}

func NewDebugThirteenError(err error) error {

	return DebugThirteenError{ Err: err, Stack: callers() }

}

func WrapDebugThirteenError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugThirteenError(err)
}

func NewDebugFourteenError(err error) error {

	return DebugFourteenError{ Err: err, Stack: callers() }

}

func WrapDebugFourteenError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugFourteenError(err)
}

func NewDebugFifteenError(err error) error {

	return DebugFifteenError{ Err: err, Stack: callers() }

}

func WrapDebugFifteenError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugFifteenError(err)
}

func NewDebugSixteenError(err error) error {

	return DebugSixteenError{ Err: err, Stack: callers() }

}

func WrapDebugSixteenError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugSixteenError(err)
}

func NewDebugSeventeenError(err error) error {

	return DebugSeventeenError{ Err: err, Stack: callers() }

}

func WrapDebugSeventeenError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugSeventeenError(err)
}

func NewDebugEighteenError(err error) error {

	return DebugEighteenError{ Err: err, Stack: callers() }

}

func WrapDebugEighteenError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugEighteenError(err)
}

func NewDebugNineteenError(err error) error {

	return DebugNineteenError{ Err: err, Stack: callers() }

}

func WrapDebugNineteenError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugNineteenError(err)
}

func NewDebugTwentyError(err error) error {

	return DebugTwentyError{ Err: err, Stack: callers() }

}

func WrapDebugTwentyError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugTwentyError(err)
}

func NewDebugTwentyOneError(err error) error {

	return DebugTwentyOneError{ Err: err, Stack: callers() }

}

func WrapDebugTwentyOneError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugTwentyOneError(err)
}

func NewDebugTwentyTwoError(err error) error {

	return DebugTwentyTwoError{ Err: err, Stack: callers() }

}

func WrapDebugTwentyTwoError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugTwentyTwoError(err)
}

func NewDebugTwentyThreeError(err error) error {

	return DebugTwentyThreeError{ Err: err, Stack: callers() }

}

func WrapDebugTwentyThreeError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugTwentyThreeError(err)
}

func NewDebugTwentyFourError(err error) error {

	return DebugTwentyFourError{ Err: err, Stack: callers() }

}

func WrapDebugTwentyFourError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugTwentyFourError(err)
}

func NewDebugTwentyFiveError(err error) error {

	return DebugTwentyFiveError{ Err: err, Stack: callers() }

}

func WrapDebugTwentyFiveError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugTwentyFiveError(err)
}

func NewDebugTwentySixError(err error) error {

	return DebugTwentySixError{ Err: err, Stack: callers() }

}

func WrapDebugTwentySixError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugTwentySixError(err)
}

func NewDebugTwentySevenError(err error) error {

	return DebugTwentySevenError{ Err: err, Stack: callers() }

}

func WrapDebugTwentySevenError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugTwentySevenError(err)
}

func NewDebugTwentyEightError(err error) error {

	return DebugTwentyEightError{ Err: err, Stack: callers() }

}

func WrapDebugTwentyEightError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugTwentyEightError(err)
}

func NewDebugTwentyNineError(err error) error {

	return DebugTwentyNineError{ Err: err, Stack: callers() }

}

func WrapDebugTwentyNineError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugTwentyNineError(err)
}

func NewDebugThirtyError(err error) error {

	return DebugThirtyError{ Err: err, Stack: callers() }

}

func WrapDebugThirtyError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugThirtyError(err)
}

func NewDebugThirtyOneError(err error) error {

	return DebugThirtyOneError{ Err: err, Stack: callers() }

}

func WrapDebugThirtyOneError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugThirtyOneError(err)
}

func NewDebugThirtyTwoError(err error) error {

	return DebugThirtyTwoError{ Err: err, Stack: callers() }

}

func WrapDebugThirtyTwoError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugThirtyTwoError(err)
}

func NewDebugThirtyThreeError(err error) error {

	return DebugThirtyThreeError{ Err: err, Stack: callers() }

}

func WrapDebugThirtyThreeError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugThirtyThreeError(err)
}

func NewDebugThirtyFourError(err error) error {

	return DebugThirtyFourError{ Err: err, Stack: callers() }

}

func WrapDebugThirtyFourError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugThirtyFourError(err)
}

func NewDebugThirtyFiveError(err error) error {

	return DebugThirtyFiveError{ Err: err, Stack: callers() }

}

func WrapDebugThirtyFiveError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugThirtyFiveError(err)
}

func NewDebugThirtySixError(err error) error {

	return DebugThirtySixError{ Err: err, Stack: callers() }

}

func WrapDebugThirtySixError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugThirtySixError(err)
}

func NewDebugThirtySevenError(err error) error {

	return DebugThirtySevenError{ Err: err, Stack: callers() }

}

func WrapDebugThirtySevenError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugThirtySevenError(err)
}

func NewDebugThirtyEightError(err error) error {

	return DebugThirtyEightError{ Err: err, Stack: callers() }

}

func WrapDebugThirtyEightError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugThirtyEightError(err)
}

func NewDebugThirtyNineError(err error) error {

	return DebugThirtyNineError{ Err: err, Stack: callers() }

}

func WrapDebugThirtyNineError(err error) error {
	if err == nil {
		return nil
	}
	return NewDebugThirtyNineError(err)
}

func NewInvalidAndroidVersionError(err error) error {

	return InvalidAndroidVersionError{ Err: err, Stack: callers() }

}

func WrapInvalidAndroidVersionError(err error) error {
	if err == nil {
		return nil
	}
	return NewInvalidAndroidVersionError(err)
}

func NewInvalidAndroidDeviceError(err error) error {

	return InvalidAndroidDeviceError{ Err: err, Stack: callers() }

}

func WrapInvalidAndroidDeviceError(err error) error {
	if err == nil {
		return nil
	}
	return NewInvalidAndroidDeviceError(err)
}

func NewInvalidIOSDeviceError(err error) error {

	return InvalidIOSDeviceError{ Err: err, Stack: callers() }

}

func WrapInvalidIOSDeviceError(err error) error {
	if err == nil {
		return nil
	}
	return NewInvalidIOSDeviceError(err)
}

func (e DebugErrorOneError) Error() string {
    return "DBGAAAAAAAB"
}

func (e DebugErrorOneError) Unwrap() error {
	return e.Err
}

func (e DebugErrorOneError) Is(target error) bool {
    t, ok := target.(DebugErrorOneError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 1
}

func (e DebugErrorOneError) Code() int {
    return 1
}

func (e DebugErrorOneError) Description() string {
    return "The first debug error"
}

func (e DebugErrorOneError) Prefix() string {
    return "DBG"
}

func (e DebugErrorOneError) String() string {
   return "DBGAAAAAAAB The first debug error"
}

func (e DebugErrorOneError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAAB")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAAB")
	}
}

func (e DebugErrorTwoError) Error() string {
    return "DBGAAAAAAAC"
}

func (e DebugErrorTwoError) Unwrap() error {
	return e.Err
}

func (e DebugErrorTwoError) Is(target error) bool {
    t, ok := target.(DebugErrorTwoError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 2
}

func (e DebugErrorTwoError) Code() int {
    return 2
}

func (e DebugErrorTwoError) Description() string {
    return "The second debug error"
}

func (e DebugErrorTwoError) Prefix() string {
    return "DBG"
}

func (e DebugErrorTwoError) String() string {
   return "DBGAAAAAAAC The second debug error"
}

func (e DebugErrorTwoError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAAC")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAAC")
	}
}

func (e DebugErrorThreeError) Error() string {
    return "DBGAAAAAAAG"
}

func (e DebugErrorThreeError) Unwrap() error {
	return e.Err
}

func (e DebugErrorThreeError) Is(target error) bool {
    t, ok := target.(DebugErrorThreeError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 6
}

func (e DebugErrorThreeError) Code() int {
    return 6
}

func (e DebugErrorThreeError) Description() string {
    return "The third debug error"
}

func (e DebugErrorThreeError) Prefix() string {
    return "DBG"
}

func (e DebugErrorThreeError) String() string {
   return "DBGAAAAAAAG The third debug error"
}

func (e DebugErrorThreeError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAAG")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAAG")
	}
}

func (e DebugSevenError) Error() string {
    return "DBGAAAAAAAH"
}

func (e DebugSevenError) Unwrap() error {
	return e.Err
}

func (e DebugSevenError) Is(target error) bool {
    t, ok := target.(DebugSevenError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 7
}

func (e DebugSevenError) Code() int {
    return 7
}

func (e DebugSevenError) Description() string {
    return "An error."
}

func (e DebugSevenError) Prefix() string {
    return "DBG"
}

func (e DebugSevenError) String() string {
   return "DBGAAAAAAAH An error."
}

func (e DebugSevenError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAAH")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAAH")
	}
}

func (e DebugEightError) Error() string {
    return "DBGAAAAAAAI"
}

func (e DebugEightError) Unwrap() error {
	return e.Err
}

func (e DebugEightError) Is(target error) bool {
    t, ok := target.(DebugEightError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 8
}

func (e DebugEightError) Code() int {
    return 8
}

func (e DebugEightError) Description() string {
    return "An error."
}

func (e DebugEightError) Prefix() string {
    return "DBG"
}

func (e DebugEightError) String() string {
   return "DBGAAAAAAAI An error."
}

func (e DebugEightError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAAI")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAAI")
	}
}

func (e DebugNineError) Error() string {
    return "DBGAAAAAAAJ"
}

func (e DebugNineError) Unwrap() error {
	return e.Err
}

func (e DebugNineError) Is(target error) bool {
    t, ok := target.(DebugNineError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 9
}

func (e DebugNineError) Code() int {
    return 9
}

func (e DebugNineError) Description() string {
    return "An error."
}

func (e DebugNineError) Prefix() string {
    return "DBG"
}

func (e DebugNineError) String() string {
   return "DBGAAAAAAAJ An error."
}

func (e DebugNineError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAAJ")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAAJ")
	}
}

func (e DebugTenError) Error() string {
    return "DBGAAAAAAAK"
}

func (e DebugTenError) Unwrap() error {
	return e.Err
}

func (e DebugTenError) Is(target error) bool {
    t, ok := target.(DebugTenError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 10
}

func (e DebugTenError) Code() int {
    return 10
}

func (e DebugTenError) Description() string {
    return "An error."
}

func (e DebugTenError) Prefix() string {
    return "DBG"
}

func (e DebugTenError) String() string {
   return "DBGAAAAAAAK An error."
}

func (e DebugTenError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAAK")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAAK")
	}
}

func (e DebugElevenError) Error() string {
    return "DBGAAAAAAAL"
}

func (e DebugElevenError) Unwrap() error {
	return e.Err
}

func (e DebugElevenError) Is(target error) bool {
    t, ok := target.(DebugElevenError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 11
}

func (e DebugElevenError) Code() int {
    return 11
}

func (e DebugElevenError) Description() string {
    return "An error."
}

func (e DebugElevenError) Prefix() string {
    return "DBG"
}

func (e DebugElevenError) String() string {
   return "DBGAAAAAAAL An error."
}

func (e DebugElevenError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAAL")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAAL")
	}
}

func (e DebugTwelveError) Error() string {
    return "DBGAAAAAAAM"
}

func (e DebugTwelveError) Unwrap() error {
	return e.Err
}

func (e DebugTwelveError) Is(target error) bool {
    t, ok := target.(DebugTwelveError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 12
}

func (e DebugTwelveError) Code() int {
    return 12
}

func (e DebugTwelveError) Description() string {
    return "An error."
}

func (e DebugTwelveError) Prefix() string {
    return "DBG"
}

func (e DebugTwelveError) String() string {
   return "DBGAAAAAAAM An error."
}

func (e DebugTwelveError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAAM")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAAM")
	}
}

func (e DebugThirteenError) Error() string {
    return "DBGAAAAAAAN"
}

func (e DebugThirteenError) Unwrap() error {
	return e.Err
}

func (e DebugThirteenError) Is(target error) bool {
    t, ok := target.(DebugThirteenError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 13
}

func (e DebugThirteenError) Code() int {
    return 13
}

func (e DebugThirteenError) Description() string {
    return "An error."
}

func (e DebugThirteenError) Prefix() string {
    return "DBG"
}

func (e DebugThirteenError) String() string {
   return "DBGAAAAAAAN An error."
}

func (e DebugThirteenError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAAN")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAAN")
	}
}

func (e DebugFourteenError) Error() string {
    return "DBGAAAAAAAO"
}

func (e DebugFourteenError) Unwrap() error {
	return e.Err
}

func (e DebugFourteenError) Is(target error) bool {
    t, ok := target.(DebugFourteenError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 14
}

func (e DebugFourteenError) Code() int {
    return 14
}

func (e DebugFourteenError) Description() string {
    return "An error."
}

func (e DebugFourteenError) Prefix() string {
    return "DBG"
}

func (e DebugFourteenError) String() string {
   return "DBGAAAAAAAO An error."
}

func (e DebugFourteenError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAAO")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAAO")
	}
}

func (e DebugFifteenError) Error() string {
    return "DBGAAAAAAAP"
}

func (e DebugFifteenError) Unwrap() error {
	return e.Err
}

func (e DebugFifteenError) Is(target error) bool {
    t, ok := target.(DebugFifteenError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 15
}

func (e DebugFifteenError) Code() int {
    return 15
}

func (e DebugFifteenError) Description() string {
    return "An error."
}

func (e DebugFifteenError) Prefix() string {
    return "DBG"
}

func (e DebugFifteenError) String() string {
   return "DBGAAAAAAAP An error."
}

func (e DebugFifteenError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAAP")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAAP")
	}
}

func (e DebugSixteenError) Error() string {
    return "DBGAAAAAAAQ"
}

func (e DebugSixteenError) Unwrap() error {
	return e.Err
}

func (e DebugSixteenError) Is(target error) bool {
    t, ok := target.(DebugSixteenError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 16
}

func (e DebugSixteenError) Code() int {
    return 16
}

func (e DebugSixteenError) Description() string {
    return "An error."
}

func (e DebugSixteenError) Prefix() string {
    return "DBG"
}

func (e DebugSixteenError) String() string {
   return "DBGAAAAAAAQ An error."
}

func (e DebugSixteenError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAAQ")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAAQ")
	}
}

func (e DebugSeventeenError) Error() string {
    return "DBGAAAAAAAR"
}

func (e DebugSeventeenError) Unwrap() error {
	return e.Err
}

func (e DebugSeventeenError) Is(target error) bool {
    t, ok := target.(DebugSeventeenError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 17
}

func (e DebugSeventeenError) Code() int {
    return 17
}

func (e DebugSeventeenError) Description() string {
    return "An error."
}

func (e DebugSeventeenError) Prefix() string {
    return "DBG"
}

func (e DebugSeventeenError) String() string {
   return "DBGAAAAAAAR An error."
}

func (e DebugSeventeenError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAAR")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAAR")
	}
}

func (e DebugEighteenError) Error() string {
    return "DBGAAAAAAAS"
}

func (e DebugEighteenError) Unwrap() error {
	return e.Err
}

func (e DebugEighteenError) Is(target error) bool {
    t, ok := target.(DebugEighteenError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 18
}

func (e DebugEighteenError) Code() int {
    return 18
}

func (e DebugEighteenError) Description() string {
    return "An error."
}

func (e DebugEighteenError) Prefix() string {
    return "DBG"
}

func (e DebugEighteenError) String() string {
   return "DBGAAAAAAAS An error."
}

func (e DebugEighteenError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAAS")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAAS")
	}
}

func (e DebugNineteenError) Error() string {
    return "DBGAAAAAAAT"
}

func (e DebugNineteenError) Unwrap() error {
	return e.Err
}

func (e DebugNineteenError) Is(target error) bool {
    t, ok := target.(DebugNineteenError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 19
}

func (e DebugNineteenError) Code() int {
    return 19
}

func (e DebugNineteenError) Description() string {
    return "An error."
}

func (e DebugNineteenError) Prefix() string {
    return "DBG"
}

func (e DebugNineteenError) String() string {
   return "DBGAAAAAAAT An error."
}

func (e DebugNineteenError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAAT")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAAT")
	}
}

func (e DebugTwentyError) Error() string {
    return "DBGAAAAAAAU"
}

func (e DebugTwentyError) Unwrap() error {
	return e.Err
}

func (e DebugTwentyError) Is(target error) bool {
    t, ok := target.(DebugTwentyError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 20
}

func (e DebugTwentyError) Code() int {
    return 20
}

func (e DebugTwentyError) Description() string {
    return "An error."
}

func (e DebugTwentyError) Prefix() string {
    return "DBG"
}

func (e DebugTwentyError) String() string {
   return "DBGAAAAAAAU An error."
}

func (e DebugTwentyError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAAU")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAAU")
	}
}

func (e DebugTwentyOneError) Error() string {
    return "DBGAAAAAAAV"
}

func (e DebugTwentyOneError) Unwrap() error {
	return e.Err
}

func (e DebugTwentyOneError) Is(target error) bool {
    t, ok := target.(DebugTwentyOneError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 21
}

func (e DebugTwentyOneError) Code() int {
    return 21
}

func (e DebugTwentyOneError) Description() string {
    return "An error."
}

func (e DebugTwentyOneError) Prefix() string {
    return "DBG"
}

func (e DebugTwentyOneError) String() string {
   return "DBGAAAAAAAV An error."
}

func (e DebugTwentyOneError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAAV")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAAV")
	}
}

func (e DebugTwentyTwoError) Error() string {
    return "DBGAAAAAAAW"
}

func (e DebugTwentyTwoError) Unwrap() error {
	return e.Err
}

func (e DebugTwentyTwoError) Is(target error) bool {
    t, ok := target.(DebugTwentyTwoError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 22
}

func (e DebugTwentyTwoError) Code() int {
    return 22
}

func (e DebugTwentyTwoError) Description() string {
    return "An error."
}

func (e DebugTwentyTwoError) Prefix() string {
    return "DBG"
}

func (e DebugTwentyTwoError) String() string {
   return "DBGAAAAAAAW An error."
}

func (e DebugTwentyTwoError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAAW")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAAW")
	}
}

func (e DebugTwentyThreeError) Error() string {
    return "DBGAAAAAAAX"
}

func (e DebugTwentyThreeError) Unwrap() error {
	return e.Err
}

func (e DebugTwentyThreeError) Is(target error) bool {
    t, ok := target.(DebugTwentyThreeError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 23
}

func (e DebugTwentyThreeError) Code() int {
    return 23
}

func (e DebugTwentyThreeError) Description() string {
    return "An error."
}

func (e DebugTwentyThreeError) Prefix() string {
    return "DBG"
}

func (e DebugTwentyThreeError) String() string {
   return "DBGAAAAAAAX An error."
}

func (e DebugTwentyThreeError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAAX")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAAX")
	}
}

func (e DebugTwentyFourError) Error() string {
    return "DBGAAAAAAAY"
}

func (e DebugTwentyFourError) Unwrap() error {
	return e.Err
}

func (e DebugTwentyFourError) Is(target error) bool {
    t, ok := target.(DebugTwentyFourError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 24
}

func (e DebugTwentyFourError) Code() int {
    return 24
}

func (e DebugTwentyFourError) Description() string {
    return "An error."
}

func (e DebugTwentyFourError) Prefix() string {
    return "DBG"
}

func (e DebugTwentyFourError) String() string {
   return "DBGAAAAAAAY An error."
}

func (e DebugTwentyFourError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAAY")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAAY")
	}
}

func (e DebugTwentyFiveError) Error() string {
    return "DBGAAAAAAAZ"
}

func (e DebugTwentyFiveError) Unwrap() error {
	return e.Err
}

func (e DebugTwentyFiveError) Is(target error) bool {
    t, ok := target.(DebugTwentyFiveError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 25
}

func (e DebugTwentyFiveError) Code() int {
    return 25
}

func (e DebugTwentyFiveError) Description() string {
    return "An error."
}

func (e DebugTwentyFiveError) Prefix() string {
    return "DBG"
}

func (e DebugTwentyFiveError) String() string {
   return "DBGAAAAAAAZ An error."
}

func (e DebugTwentyFiveError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAAZ")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAAZ")
	}
}

func (e DebugTwentySixError) Error() string {
    return "DBGAAAAAAA0"
}

func (e DebugTwentySixError) Unwrap() error {
	return e.Err
}

func (e DebugTwentySixError) Is(target error) bool {
    t, ok := target.(DebugTwentySixError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 26
}

func (e DebugTwentySixError) Code() int {
    return 26
}

func (e DebugTwentySixError) Description() string {
    return "An error."
}

func (e DebugTwentySixError) Prefix() string {
    return "DBG"
}

func (e DebugTwentySixError) String() string {
   return "DBGAAAAAAA0 An error."
}

func (e DebugTwentySixError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAA0")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAA0")
	}
}

func (e DebugTwentySevenError) Error() string {
    return "DBGAAAAAAA1"
}

func (e DebugTwentySevenError) Unwrap() error {
	return e.Err
}

func (e DebugTwentySevenError) Is(target error) bool {
    t, ok := target.(DebugTwentySevenError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 27
}

func (e DebugTwentySevenError) Code() int {
    return 27
}

func (e DebugTwentySevenError) Description() string {
    return "An error."
}

func (e DebugTwentySevenError) Prefix() string {
    return "DBG"
}

func (e DebugTwentySevenError) String() string {
   return "DBGAAAAAAA1 An error."
}

func (e DebugTwentySevenError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAA1")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAA1")
	}
}

func (e DebugTwentyEightError) Error() string {
    return "DBGAAAAAAA2"
}

func (e DebugTwentyEightError) Unwrap() error {
	return e.Err
}

func (e DebugTwentyEightError) Is(target error) bool {
    t, ok := target.(DebugTwentyEightError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 28
}

func (e DebugTwentyEightError) Code() int {
    return 28
}

func (e DebugTwentyEightError) Description() string {
    return "An error."
}

func (e DebugTwentyEightError) Prefix() string {
    return "DBG"
}

func (e DebugTwentyEightError) String() string {
   return "DBGAAAAAAA2 An error."
}

func (e DebugTwentyEightError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAA2")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAA2")
	}
}

func (e DebugTwentyNineError) Error() string {
    return "DBGAAAAAAA3"
}

func (e DebugTwentyNineError) Unwrap() error {
	return e.Err
}

func (e DebugTwentyNineError) Is(target error) bool {
    t, ok := target.(DebugTwentyNineError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 29
}

func (e DebugTwentyNineError) Code() int {
    return 29
}

func (e DebugTwentyNineError) Description() string {
    return "An error."
}

func (e DebugTwentyNineError) Prefix() string {
    return "DBG"
}

func (e DebugTwentyNineError) String() string {
   return "DBGAAAAAAA3 An error."
}

func (e DebugTwentyNineError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAA3")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAA3")
	}
}

func (e DebugThirtyError) Error() string {
    return "DBGAAAAAAA4"
}

func (e DebugThirtyError) Unwrap() error {
	return e.Err
}

func (e DebugThirtyError) Is(target error) bool {
    t, ok := target.(DebugThirtyError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 30
}

func (e DebugThirtyError) Code() int {
    return 30
}

func (e DebugThirtyError) Description() string {
    return "An error."
}

func (e DebugThirtyError) Prefix() string {
    return "DBG"
}

func (e DebugThirtyError) String() string {
   return "DBGAAAAAAA4 An error."
}

func (e DebugThirtyError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAA4")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAA4")
	}
}

func (e DebugThirtyOneError) Error() string {
    return "DBGAAAAAAA5"
}

func (e DebugThirtyOneError) Unwrap() error {
	return e.Err
}

func (e DebugThirtyOneError) Is(target error) bool {
    t, ok := target.(DebugThirtyOneError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 31
}

func (e DebugThirtyOneError) Code() int {
    return 31
}

func (e DebugThirtyOneError) Description() string {
    return "An error."
}

func (e DebugThirtyOneError) Prefix() string {
    return "DBG"
}

func (e DebugThirtyOneError) String() string {
   return "DBGAAAAAAA5 An error."
}

func (e DebugThirtyOneError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAA5")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAA5")
	}
}

func (e DebugThirtyTwoError) Error() string {
    return "DBGAAAAAAA6"
}

func (e DebugThirtyTwoError) Unwrap() error {
	return e.Err
}

func (e DebugThirtyTwoError) Is(target error) bool {
    t, ok := target.(DebugThirtyTwoError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 32
}

func (e DebugThirtyTwoError) Code() int {
    return 32
}

func (e DebugThirtyTwoError) Description() string {
    return "An error."
}

func (e DebugThirtyTwoError) Prefix() string {
    return "DBG"
}

func (e DebugThirtyTwoError) String() string {
   return "DBGAAAAAAA6 An error."
}

func (e DebugThirtyTwoError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAA6")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAA6")
	}
}

func (e DebugThirtyThreeError) Error() string {
    return "DBGAAAAAAA7"
}

func (e DebugThirtyThreeError) Unwrap() error {
	return e.Err
}

func (e DebugThirtyThreeError) Is(target error) bool {
    t, ok := target.(DebugThirtyThreeError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 33
}

func (e DebugThirtyThreeError) Code() int {
    return 33
}

func (e DebugThirtyThreeError) Description() string {
    return "An error."
}

func (e DebugThirtyThreeError) Prefix() string {
    return "DBG"
}

func (e DebugThirtyThreeError) String() string {
   return "DBGAAAAAAA7 An error."
}

func (e DebugThirtyThreeError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAA7")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAA7")
	}
}

func (e DebugThirtyFourError) Error() string {
    return "DBGAAAAAAA8"
}

func (e DebugThirtyFourError) Unwrap() error {
	return e.Err
}

func (e DebugThirtyFourError) Is(target error) bool {
    t, ok := target.(DebugThirtyFourError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 34
}

func (e DebugThirtyFourError) Code() int {
    return 34
}

func (e DebugThirtyFourError) Description() string {
    return "An error."
}

func (e DebugThirtyFourError) Prefix() string {
    return "DBG"
}

func (e DebugThirtyFourError) String() string {
   return "DBGAAAAAAA8 An error."
}

func (e DebugThirtyFourError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAA8")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAA8")
	}
}

func (e DebugThirtyFiveError) Error() string {
    return "DBGAAAAAAA9"
}

func (e DebugThirtyFiveError) Unwrap() error {
	return e.Err
}

func (e DebugThirtyFiveError) Is(target error) bool {
    t, ok := target.(DebugThirtyFiveError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 35
}

func (e DebugThirtyFiveError) Code() int {
    return 35
}

func (e DebugThirtyFiveError) Description() string {
    return "An error."
}

func (e DebugThirtyFiveError) Prefix() string {
    return "DBG"
}

func (e DebugThirtyFiveError) String() string {
   return "DBGAAAAAAA9 An error."
}

func (e DebugThirtyFiveError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAAA9")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAAA9")
	}
}

func (e DebugThirtySixError) Error() string {
    return "DBGAAAAAABA"
}

func (e DebugThirtySixError) Unwrap() error {
	return e.Err
}

func (e DebugThirtySixError) Is(target error) bool {
    t, ok := target.(DebugThirtySixError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 36
}

func (e DebugThirtySixError) Code() int {
    return 36
}

func (e DebugThirtySixError) Description() string {
    return "An error."
}

func (e DebugThirtySixError) Prefix() string {
    return "DBG"
}

func (e DebugThirtySixError) String() string {
   return "DBGAAAAAABA An error."
}

func (e DebugThirtySixError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAABA")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAABA")
	}
}

func (e DebugThirtySevenError) Error() string {
    return "DBGAAAAAABB"
}

func (e DebugThirtySevenError) Unwrap() error {
	return e.Err
}

func (e DebugThirtySevenError) Is(target error) bool {
    t, ok := target.(DebugThirtySevenError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 37
}

func (e DebugThirtySevenError) Code() int {
    return 37
}

func (e DebugThirtySevenError) Description() string {
    return "An error."
}

func (e DebugThirtySevenError) Prefix() string {
    return "DBG"
}

func (e DebugThirtySevenError) String() string {
   return "DBGAAAAAABB An error."
}

func (e DebugThirtySevenError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAABB")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAABB")
	}
}

func (e DebugThirtyEightError) Error() string {
    return "DBGAAAAAABC"
}

func (e DebugThirtyEightError) Unwrap() error {
	return e.Err
}

func (e DebugThirtyEightError) Is(target error) bool {
    t, ok := target.(DebugThirtyEightError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 38
}

func (e DebugThirtyEightError) Code() int {
    return 38
}

func (e DebugThirtyEightError) Description() string {
    return "An error."
}

func (e DebugThirtyEightError) Prefix() string {
    return "DBG"
}

func (e DebugThirtyEightError) String() string {
   return "DBGAAAAAABC An error."
}

func (e DebugThirtyEightError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAABC")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAABC")
	}
}

func (e DebugThirtyNineError) Error() string {
    return "DBGAAAAAABD"
}

func (e DebugThirtyNineError) Unwrap() error {
	return e.Err
}

func (e DebugThirtyNineError) Is(target error) bool {
    t, ok := target.(DebugThirtyNineError)
    if !ok {
        return false
    }
    return t.Prefix() == "DBG" && t.Code() == 39
}

func (e DebugThirtyNineError) Code() int {
    return 39
}

func (e DebugThirtyNineError) Description() string {
    return "An error."
}

func (e DebugThirtyNineError) Prefix() string {
    return "DBG"
}

func (e DebugThirtyNineError) String() string {
   return "DBGAAAAAABD An error."
}

func (e DebugThirtyNineError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "DBGAAAAAABD")
	case 'q':
		fmt.Fprintf(s, "%q", "DBGAAAAAABD")
	}
}

func (e InvalidAndroidVersionError) Error() string {
    return "MOBANDAAAAAAAE"
}

func (e InvalidAndroidVersionError) Unwrap() error {
	return e.Err
}

func (e InvalidAndroidVersionError) Is(target error) bool {
    t, ok := target.(InvalidAndroidVersionError)
    if !ok {
        return false
    }
    return t.Prefix() == "MOBAND" && t.Code() == 4
}

func (e InvalidAndroidVersionError) Code() int {
    return 4
}

func (e InvalidAndroidVersionError) Description() string {
    return "The Android version is invalid."
}

func (e InvalidAndroidVersionError) Prefix() string {
    return "MOBAND"
}

func (e InvalidAndroidVersionError) String() string {
   return "MOBANDAAAAAAAE The Android version is invalid."
}

func (e InvalidAndroidVersionError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "MOBANDAAAAAAAE")
	case 'q':
		fmt.Fprintf(s, "%q", "MOBANDAAAAAAAE")
	}
}

func (e InvalidAndroidDeviceError) Error() string {
    return "MOBANDAAAAAAAF"
}

func (e InvalidAndroidDeviceError) Unwrap() error {
	return e.Err
}

func (e InvalidAndroidDeviceError) Is(target error) bool {
    t, ok := target.(InvalidAndroidDeviceError)
    if !ok {
        return false
    }
    return t.Prefix() == "MOBAND" && t.Code() == 5
}

func (e InvalidAndroidDeviceError) Code() int {
    return 5
}

func (e InvalidAndroidDeviceError) Description() string {
    return "The Android device is invalid."
}

func (e InvalidAndroidDeviceError) Prefix() string {
    return "MOBAND"
}

func (e InvalidAndroidDeviceError) String() string {
   return "MOBANDAAAAAAAF The Android device is invalid."
}

func (e InvalidAndroidDeviceError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "MOBANDAAAAAAAF")
	case 'q':
		fmt.Fprintf(s, "%q", "MOBANDAAAAAAAF")
	}
}

func (e InvalidIOSDeviceError) Error() string {
    return "MOBIOSAAAAAAAD"
}

func (e InvalidIOSDeviceError) Unwrap() error {
	return e.Err
}

func (e InvalidIOSDeviceError) Is(target error) bool {
    t, ok := target.(InvalidIOSDeviceError)
    if !ok {
        return false
    }
    return t.Prefix() == "MOBIOS" && t.Code() == 3
}

func (e InvalidIOSDeviceError) Code() int {
    return 3
}

func (e InvalidIOSDeviceError) Description() string {
    return "The iOS device is invalid."
}

func (e InvalidIOSDeviceError) Prefix() string {
    return "MOBIOS"
}

func (e InvalidIOSDeviceError) String() string {
   return "MOBIOSAAAAAAAD The iOS device is invalid."
}

func (e InvalidIOSDeviceError)  Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v", e.Unwrap())
			e.Stack.Format(s, verb)
			return
		}
		fallthrough
	case 's':
		io.WriteString(s, "MOBIOSAAAAAAAD")
	case 'q':
		fmt.Fprintf(s, "%q", "MOBIOSAAAAAAAD")
	}
}


// Frame represents a program counter inside a stack frame.
// For historical reasons if Frame is interpreted as a uintptr
// its value represents the program counter + 1.
type Frame uintptr

// pc returns the program counter for this frame;
// multiple frames may have the same PC value.
func (f Frame) pc() uintptr { return uintptr(f) - 1 }

// file returns the full path to the file that contains the
// function for this Frame's pc.
func (f Frame) file() string {
	fn := runtime.FuncForPC(f.pc())
	if fn == nil {
		return "unknown"
	}
	file, _ := fn.FileLine(f.pc())
	return file
}

// line returns the line number of source code of the
// function for this Frame's pc.
func (f Frame) line() int {
	fn := runtime.FuncForPC(f.pc())
	if fn == nil {
		return 0
	}
	_, line := fn.FileLine(f.pc())
	return line
}

// name returns the name of this function, if known.
func (f Frame) name() string {
	fn := runtime.FuncForPC(f.pc())
	if fn == nil {
		return "unknown"
	}
	return fn.Name()
}

// Format formats the frame according to the fmt.Formatter interface.
//
//    %s    source file
//    %d    source line
//    %n    function name
//    %v    equivalent to %s:%d
//
// Format accepts flags that alter the printing of some verbs, as follows:
//
//    %+s   function name and path of source file relative to the compile time
//          GOPATH separated by \n\t (<funcname>\n\t<path>)
//    %+v   equivalent to %+s:%d
func (f Frame) Format(s fmt.State, verb rune) {
	switch verb {
	case 's':
		switch {
		case s.Flag('+'):
			io.WriteString(s, f.name())
			io.WriteString(s, "\n\t")
			io.WriteString(s, f.file())
		default:
			io.WriteString(s, path.Base(f.file()))
		}
	case 'd':
		io.WriteString(s, strconv.Itoa(f.line()))
	case 'n':
		io.WriteString(s, funcname(f.name()))
	case 'v':
		f.Format(s, 's')
		io.WriteString(s, ":")
		f.Format(s, 'd')
	}
}

// MarshalText formats a stacktrace Frame as a text string. The output is the
// same as that of fmt.Sprintf("%+v", f), but without newlines or tabs.
func (f Frame) MarshalText() ([]byte, error) {
	name := f.name()
	if name == "unknown" {
		return []byte(name), nil
	}
	return []byte(fmt.Sprintf("%s %s:%d", name, f.file(), f.line())), nil
}

// StackTrace is stack of Frames from innermost (newest) to outermost (oldest).
type StackTrace []Frame


// Format formats the stack of Frames according to the fmt.Formatter interface.
//
//    %s	lists source files for each Frame in the stack
//    %v	lists the source file and line number for each Frame in the stack
//
// Format accepts flags that alter the printing of some verbs, as follows:
//
//    %+v   Prints filename, function, and line number for each Frame in the stack.
func (st StackTrace) Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		switch {
		case s.Flag('+'):
			for _, f := range st {
				io.WriteString(s, "\n")
				f.Format(s, verb)
			}
		case s.Flag('#'):
			fmt.Fprintf(s, "%#v", []Frame(st))
		default:
			st.formatSlice(s, verb)
		}
	case 's':
		st.formatSlice(s, verb)
	}
}

// formatSlice will format this StackTrace into the given buffer as a slice of
// Frame, only valid when called with '%s' or '%v'.
func (st StackTrace) formatSlice(s fmt.State, verb rune) {
	io.WriteString(s, "[")
	for i, f := range st {
		if i > 0 {
			io.WriteString(s, " ")
		}
		f.Format(s, verb)
	}
	io.WriteString(s, "]")
}

// stack represents a stack of program counters.
type stack []uintptr

func (s *stack) Format(st fmt.State, verb rune) {
	switch verb {
	case 'v':
		switch {
		case st.Flag('+'):
			for _, pc := range *s {
				f := Frame(pc)
				fmt.Fprintf(st, "\n%+v", f)
			}
		}
	}
}

func (s *stack) StackTrace() StackTrace {
	f := make([]Frame, len(*s))
	for i := 0; i < len(f); i++ {
		f[i] = Frame((*s)[i])
	}
	return f
}

func callers() *stack {
	const depth = 32
	var pcs [depth]uintptr
	n := runtime.Callers(3, pcs[:])
	var st stack = pcs[0:n]
	return &st
}

// funcname removes the path prefix component of a function's name reported by func.Name().
func funcname(name string) string {
	i := strings.LastIndex(name, "/")
	name = name[i+1:]
	i = strings.Index(name, ".")
	return name[i+1:]
}

func ErrorChain(err error) []string {
	var results []string
	if err == nil {
		return results
	}
	depth := 0
	next := err
	for {
		if depth > 10 {
			break
		}
		results = append(results, next.Error())

		next = go_errors.Unwrap(next)
		if next == nil {
			break
		}

		depth = depth + 1
	}
	return results
}
